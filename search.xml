<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JUC并发编程(下)</title>
      <link href="/2022/04/28/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
      <url>/2022/04/28/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><a name="F9Ftn"></a></p><h2 id="1-四大函数式接口"><a href="#1-四大函数式接口" class="headerlink" title="1. 四大函数式接口"></a>1. 四大函数式接口</h2><p>新时代的程序员：<a href="https://so.csdn.net/so/search?q=lambda&spm=1001.2101.3001.7020">lambda</a>表达式、链式编程、函数式接口、Stream流式计算<br />函数式接口： 只有一个方法的接口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@FunctionalInterface</span> <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 泛型、枚举、反射 </span><span class="token comment">// lambda表达式、链式编程、函数式接口、Stream流式计算 </span><span class="token comment">// 超级多FunctionalInterface </span><span class="token comment">// 简化编程模型，在新版本的框架底层大量应用！ </span><span class="token comment">// foreach(消费者类的函数式接口)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>四大函数式接口：</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650543006520-c8f4e557-2724-483f-9901-6cbb23bdefa5.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue5688a15&margin=%5Bobject%20Object%5D&name=image.png&originHeight=534&originWidth=271&originalType=url&ratio=1&rotation=0&showTitle=false&size=13959&status=done&style=none&taskId=u91e7521d-bb0f-4a6a-9040-b5a45251f07&title=" alt="image.png"><br><a name="GuY3b"></a></p><p>######## Function 函数式接口<br>Function函数式接口<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650543042136-67f23aa2-b08f-4b0e-bc01-1a24c73d47a4.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u01d33e6c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=446&originWidth=747&originalType=url&ratio=1&rotation=0&showTitle=false&size=117295&status=done&style=none&taskId=ucac3465c-e51e-477d-b09b-2100ad0225c&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Function 函数型接口, 有一个输入参数，有一个输出参数 * 只要是 函数型接口 可以 用 lambda表达式简化 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                      <span class="token comment">/*Function&lt;String,String> function = new         Function&lt;String,String>() &#123;            @Override            public String apply(String str) &#123;                return str;            &#125;        &#125;;*/</span>        <span class="token comment">// lambda 表达式简化：</span>        <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">></span></span> function <span class="token operator">=</span> str<span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token string">"asd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="oEJ3j"></a></p><p>######## Predicate 断定型接口<br>断定型接口：有一个输入参数，返回值只能是 布尔值！<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650543514162-9cb7db33-443b-486b-bcf7-26998d4b1772.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u6b85e095&margin=%5Bobject%20Object%5D&name=image.png&originHeight=286&originWidth=731&originalType=url&ratio=1&rotation=0&showTitle=false&size=71135&status=done&style=none&taskId=u729e73c7-5f3f-4fcb-bc20-3e8fb1c3fa2&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* * 断定型接口：有一个输入参数，返回值只能是 布尔值！ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 判断字符串是否为空</span>        <span class="token comment">/*Predicate&lt;String> predicate = new Predicate&lt;String>()&#123;            @Override            public boolean test(String str) &#123;                return str.isEmpty();//true或false            &#125;        &#125;;*/</span>        <span class="token class-name">Predicate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> predicate <span class="token operator">=</span>             <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>predicate<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="unuqo"></a></p><p>######## Consumer 消费型接口<br>Consumer 消费型接口<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650543723349-0a3b661d-aaf3-46a8-ac08-96401e3b9551.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ua777fd00&margin=%5Bobject%20Object%5D&name=image.png&originHeight=437&originWidth=720&originalType=url&ratio=1&rotation=0&showTitle=false&size=98103&status=done&style=none&taskId=udca96be9-3d23-4429-bf12-7b0065e87bd&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span><span class="token class-name">Consumer</span><span class="token punctuation">;</span><span class="token comment">/** * Consumer 消费型接口: 只有输入，没有返回值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*Consumer&lt;String> consumer = new Consumer&lt;String>() &#123;            @Override            public void accept(String str) &#123;                System.out.println(str);            &#125;        &#125;;*/</span>        <span class="token class-name">Consumer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> consumer <span class="token operator">=</span>             <span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                consumer<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"sdadasd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="hTBDo"></a></p><p>######## Supplier 供给型接口<br>Supplier 供给型接口<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650543749496-88639ba4-b10a-4043-a517-4f8c74cdb85d.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u19a24fda&margin=%5Bobject%20Object%5D&name=image.png&originHeight=265&originWidth=686&originalType=url&ratio=1&rotation=0&showTitle=false&size=51458&status=done&style=none&taskId=u611e8716-d617-4b69-8045-668229a3f51&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">mport <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>function<span class="token punctuation">.</span></span>Supplier</span><span class="token punctuation">;</span><span class="token comment">/** * Supplier 供给型接口 没有参数，只有返回值 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*Supplier supplier = new Supplier&lt;Integer>() &#123;            @Override            public Integer get() &#123;                System.out.println("get()");                return 1024;            &#125;        &#125;;*/</span>        <span class="token class-name">Supplier</span> supplier <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>supplier<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="FuZqq"></a></p><h2 id="2-Stream流式计算"><a href="#2-Stream流式计算" class="headerlink" title="2. Stream流式计算"></a>2. Stream流式计算</h2><p>什么是Stream流式计算<br />大数据：存储 + 计算<br />集合、MySQL 本质就是存储东西的；<br />计算都应该交给流来操作！<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650544179717-1da49870-1c70-44d9-bae9-f560cb17db8b.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=udc76411e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=194&originWidth=635&originalType=url&ratio=1&rotation=0&showTitle=false&size=21912&status=done&style=none&taskId=u3eaaa215-d5f5-4d0d-bf34-c27856a9850&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 题目要求：一分钟内完成此题，只能用一行代码实现！ * 现在有5个用户！筛选： * 1、ID 必须是偶数 * 2、年龄必须大于23岁 * 3、用户名转为大写字母 * 4、用户名字母倒着排序 * 5、只输出一个用户！ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> u2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> u3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> u4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> u5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 集合就是存储</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>u1<span class="token punctuation">,</span> u2<span class="token punctuation">,</span> u3<span class="token punctuation">,</span> u4<span class="token punctuation">,</span> u5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 计算交给Stream流</span>        <span class="token comment">// lambda表达式、链式编程、函数式接口、Stream流式计算</span>        list<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>u<span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// ID 必须是偶数</span>                <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>u<span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">23</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 年龄必须大于23岁</span>                <span class="token comment">// 用户名转为大写字母</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>u<span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> u<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token comment">// 用户名字母倒着排序</span>                <span class="token punctuation">.</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">(</span>uu1<span class="token punctuation">,</span>uu2<span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> uu2<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>uu1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// 只输出一个用户！</span>                <span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token operator">::</span><span class="token function">println</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="YFqU1"></a></p><h2 id="3-ForkJoin"><a href="#3-ForkJoin" class="headerlink" title=" 3.ForkJoin"></a><br /> 3.ForkJoin</h2><p>什么是 ForkJoin<br />ForkJoin 在 JDK 1.7 ， 并行执行任务！提高效率。大数据量！<br />大数据：Map Reduce （把大任务拆分为小任务）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650544716380-e4b49222-20af-4776-807a-4f5147c8d326.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u0a0096ae&margin=%5Bobject%20Object%5D&name=image.png&originHeight=568&originWidth=699&originalType=url&ratio=1&rotation=0&showTitle=false&size=83052&status=done&style=none&taskId=u44d06146-ac1b-45b7-bcc0-288923e5b0e&title=" alt="image.png"><br />ForkJoin 特点：工作窃取<br />这个里面维护的都是双端队列<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650544735273-7fecf423-f758-4338-8769-28b2bf8b30d8.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u61338191&margin=%5Bobject%20Object%5D&name=image.png&originHeight=441&originWidth=321&originalType=url&ratio=1&rotation=0&showTitle=false&size=24942&status=done&style=none&taskId=u32bb2aed-30aa-4ad5-9d67-68dc53c4e22&title=" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650544744233-1d516b97-29f0-4ccf-813b-d3370ff597dc.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u397bbb34&margin=%5Bobject%20Object%5D&name=image.png&originHeight=95&originWidth=646&originalType=url&ratio=1&rotation=0&showTitle=false&size=15246&status=done&style=none&taskId=u2345055f-9b2b-42b6-8826-2de48eac0b4&title=" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650544856973-8e4932d9-92d6-4942-a30f-fb5cc5038c37.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u796af6ce&margin=%5Bobject%20Object%5D&name=image.png&originHeight=348&originWidth=809&originalType=url&ratio=1&rotation=0&showTitle=false&size=89784&status=done&style=none&taskId=ud114a264-9119-40f1-a44f-d1fd53cc095&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 求和计算的任务！ * 3000   6000（ForkJoin）  9000（Stream并行流） * // 如何使用 forkjoin * // 1、forkjoinPool 通过它来执行 * // 2、计算任务 forkjoinPool.execute(ForkJoinTask task) * // 3. 计算类要继承 RecursiveTask(递归任务，有返回值的) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ForkJoinDemo</span> <span class="token keyword">extends</span> <span class="token class-name">RecursiveTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> start<span class="token punctuation">;</span>  <span class="token comment">// 1</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> end<span class="token punctuation">;</span>    <span class="token comment">// 1990900000</span>    <span class="token comment">// 临界值</span>    <span class="token keyword">private</span> <span class="token class-name">Long</span> temp <span class="token operator">=</span> <span class="token number">10000L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span><span class="token class-name">Long</span> start<span class="token punctuation">,</span> <span class="token class-name">Long</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>start <span class="token operator">=</span> start<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>end <span class="token operator">=</span> end<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 计算方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token class-name">Long</span> <span class="token function">compute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token operator">&lt;</span>temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Long</span> sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> sum<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// forkjoin 递归</span>            <span class="token keyword">long</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>start <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 中间值</span>            <span class="token class-name">ForkJoinDemo</span> task1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>            task1<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拆分任务，把任务压入线程队列</span>            <span class="token class-name">ForkJoinDemo</span> task2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>            task2<span class="token punctuation">.</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拆分任务，把任务压入线程队列</span>            <span class="token keyword">return</span> task1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> task2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 同一个任务，别人效率高你几十倍！ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">//         test1(); // 12224</span>         <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10038</span>         <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 153</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 普通程序员</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Long</span> sum <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Long</span> i <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10_0000_0000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token operator">+</span>sum<span class="token operator">+</span><span class="token string">" 时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 会使用ForkJoin</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ForkJoinPool</span> forkJoinPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> task <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ForkJoinDemo</span><span class="token punctuation">(</span>                <span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">10_0000_0000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 提交任务</span>        <span class="token class-name">ForkJoinTask</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> submit <span class="token operator">=</span> forkJoinPool<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>task<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> sum <span class="token operator">=</span> submit<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获得结果</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token operator">+</span>sum<span class="token operator">+</span><span class="token string">" 时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Stream并行流 ()  (]</span>        <span class="token keyword">long</span> sum <span class="token operator">=</span> <span class="token class-name">LongStream</span>                <span class="token punctuation">.</span><span class="token function">rangeClosed</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">10_0000_0000L</span><span class="token punctuation">)</span> <span class="token comment">// 计算范围(,]</span>                <span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 并行计算</span>                <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token operator">::</span><span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出结果</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span><span class="token operator">+</span><span class="token string">"时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>end<span class="token operator">-</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="XGTDi"></a></p><h2 id="4-异步回调"><a href="#4-异步回调" class="headerlink" title="4. 异步回调"></a>4. 异步回调</h2><p>Future 设计的初衷： 对将来的某个事件的结果进行建模<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650546789317-b8eb16ce-2e45-49aa-b1f5-61173a0afa3f.png##clientId=uc54542cc-07c0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc8d0eda4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=227&originWidth=766&originalType=url&ratio=1&rotation=0&showTitle=false&size=45150&status=done&style=none&taskId=u1f67ce8b-e97c-489b-893d-e3045358693&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>future</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Timer</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CompletableFuture</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Future</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 异步调用： CompletableFuture * 异步执行 * 成功回调 * 失败回调 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 没有返回值的 runAsync 异步回调</span><span class="token comment">//        CompletableFuture&lt;Void> completableFuture =</span><span class="token comment">//        CompletableFuture.runAsync(()->&#123;</span><span class="token comment">//            try &#123;</span><span class="token comment">//                TimeUnit.SECONDS.sleep(2);</span><span class="token comment">//            &#125; catch (InterruptedException e) &#123;</span><span class="token comment">//                e.printStackTrace();</span><span class="token comment">//            &#125;</span><span class="token comment">//            System.out.println(</span><span class="token comment">//        Thread.currentThread().getName()+"runAsync=>Void");</span><span class="token comment">//        &#125;);</span><span class="token comment">//</span><span class="token comment">//        System.out.println("1111");</span><span class="token comment">//</span><span class="token comment">//        completableFuture.get(); // 获取阻塞执行结果</span>        <span class="token comment">// 有返回值的 supplyAsync 异步回调</span>        <span class="token comment">// ajax，成功和失败的回调</span>        <span class="token comment">// 返回的是错误信息；</span>        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> completableFuture <span class="token operator">=</span>                <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">supplyAsync</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span><span class="token string">"supplyAsync=>Integer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>completableFuture<span class="token punctuation">.</span><span class="token function">whenComplete</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"t=>"</span> <span class="token operator">+</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常的返回结果</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"u=>"</span> <span class="token operator">+</span> u<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 错误信息：</span>            <span class="token comment">// java.util.concurrent.CompletionException:</span>            <span class="token comment">// java.lang.ArithmeticException: / by zero</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exceptionally</span><span class="token punctuation">(</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">233</span><span class="token punctuation">;</span> <span class="token comment">// 可以获取到错误的返回结果</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/**         * succee Code 200         * error Code 404 500         */</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="fcyBp"></a></p><h2 id="5-JMM"><a href="#5-JMM" class="headerlink" title="5. JMM"></a>5. JMM</h2><p>请你谈谈你对 Volatile 的理解<br /><strong>Volatile</strong> 是 Java 虚拟机提供<strong>轻量级的同步机制</strong>，类似于<strong>synchronized</strong> 但是没有其强大。<br />1、保证可见性<br /><strong>2、不保证原子性</strong><br />3、防止指令重排</p><hr><p>什么是JMM<br />JMM ： Java内存模型，不存在的东西，概念！约定！<br /><strong>关于JMM的一些同步的约定：</strong><br />1、线程解锁前，必须把共享变量<strong>立刻</strong>刷回主存。<br />2、线程加锁前，必须读取主存中的最新值到工作内存中！<br />3、加锁和解锁是同一把锁。<br />线程 <strong>工作内存</strong> 、<strong>主内存</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650717969589-5e5aefe1-1f12-436a-929f-e18c3a45eb8f.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u4640d6e7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=487&originWidth=788&originalType=url&ratio=1&rotation=0&showTitle=false&size=53223&status=done&style=none&taskId=u52b575e8-7228-47be-80fa-82560e5e1ea&title=" alt="image.png"><br />勘误：先store  再  write<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650718229743-c5ef5951-b598-454b-9e90-a759fbbb5f95.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uce6984cc&margin=%5Bobject%20Object%5D&name=image.png&originHeight=485&originWidth=880&originalType=url&ratio=1&rotation=0&showTitle=false&size=64434&status=done&style=none&taskId=u43c571cc-e10f-49fd-bef3-70a2edaff46&title=" alt="image.png"><br /><strong>内存交互操作有8种，虚拟机实现必须保证每一个操作都是原子的，不可在分的（对于double和long类型的变量来说，load、store、read和writ操作在某些平台上允许例外）</strong></p><ul><li>lock （锁定）：作用于主内存的变量，把一个变量标识为线程独占状态</li><li>unlock （解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定</li><li>read （读取）：作用于主内存变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用</li><li>load （载入）：作用于工作内存的变量，它把read操作从主存中变量放入工作内存中</li><li>use （使用）：作用于工作内存中的变量，它把工作内存中的变量传输给执行引擎，每当虚拟机遇到一个需要使用到变量的值，就会使用到这个指令</li><li>assign （赋值）：作用于工作内存中的变量，它把一个从执行引擎中接受到的值放入工作内存的变量副本中</li><li>store （存储）：作用于主内存中的变量，它把一个从工作内存中一个变量的值传送到主内存中，以便后续的write使用</li><li>write （写入）：作用于主内存中的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中</li></ul><p><strong>JMM 对这八种指令的使用，制定了如下规则：</strong></p><ul><li>不允许read和load、store和write操作之一单独出现。即使用了read必须load，使用了store必须write</li><li>不允许线程丢弃他最近的assign操作，即工作变量的数据改变了之后，必须告知主存</li><li>不允许一个线程将没有assign的数据从工作内存同步回主内存</li><li>一个新的变量必须在主内存中诞生，不允许工作内存直接使用一个未被初始化的变量。就是怼变量实施use、store操作之前，必须经过assign和load操作</li><li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁</li><li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值</li><li>如果一个变量没有被lock，就不能对其进行unlock操作。也不能unlock一个被其他线程锁住的变量</li><li>对一个变量进行unlock操作之前，必须把此变量同步回主内存</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span>JMM<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题： 程序不知道主内存的值已经被修改过了</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650718720217-86bcf935-123a-441c-ab71-79a6568b222c.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u026aad0b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=458&originWidth=901&originalType=url&ratio=1&rotation=0&showTitle=false&size=93095&status=done&style=none&taskId=u0dd304ae-d264-4938-bb83-a333ff5fd76&title=" alt="image.png"><br><a name="GHZTZ"></a></p><h2 id="6-Volatile"><a href="#6-Volatile" class="headerlink" title="6. Volatile"></a>6. Volatile</h2><p><a name="NISPB"></a></p><h4 id="1-保证可见性"><a href="#1-保证可见性" class="headerlink" title="1.保证可见性"></a>1.保证可见性</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMMDemo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//不加volatile 程序就会死循环</span>    <span class="token comment">//加volatile保证可见性</span>    <span class="token keyword">private</span>  <span class="token keyword">volatile</span> <span class="token keyword">static</span>  <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="E9vPk"></a></p><h4 id="2-不保证原子性"><a href="#2-不保证原子性" class="headerlink" title="2.不保证原子性"></a>2.不保证原子性</h4><p>原子性 : 不可分割<br />线程A在执行任务的时候，不能被打扰的，也不能被分割。要么同时成功，要么同时失败。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span>JMM<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        num<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">//不是原子性操作</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">20</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">activeCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>如果不加</strong> <strong>lock</strong> <strong>和</strong> <strong>synchronized</strong> <strong>，怎么样保证原子性</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650719366986-61040db1-67c2-4a68-abd0-2c2af6bba890.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ua8ccfaca&margin=%5Bobject%20Object%5D&name=image.png&originHeight=280&originWidth=716&originalType=url&ratio=1&rotation=0&showTitle=false&size=121671&status=done&style=none&taskId=ue5a26c80-7cf4-478a-9dfc-3c74216bcbd&title=" alt="image.png"></p><p><strong>Solution</strong>:使用原子类，解决原子性问题。<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650719488148-d2938e39-31b0-4083-90ea-f3b52296fe35.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u9ad88a55&margin=%5Bobject%20Object%5D&name=image.png&originHeight=544&originWidth=1065&originalType=url&ratio=1&rotation=0&showTitle=false&size=56563&status=done&style=none&taskId=ud499aabe-e6a1-4d33-833f-ea83a8ea426&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">AtomicInteger</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//        num++;  //不是原子性操作</span>        num<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//+1方法</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这些类的底层都直接和操作系统挂钩！在内存中修改值！Unsafe类是一个很特殊的存在！</p><p><a name="pShMc"></a></p><h4 id="3-禁止指令重排"><a href="#3-禁止指令重排" class="headerlink" title="3. 禁止指令重排"></a>3. 禁止指令重排</h4><p>指令重排<br />什么是指令重排？：<strong>我们写的程序，计算机并不是按照你写的那样去执行的。</strong><br />源代码 —&gt; 编译器优化的重排 —&gt; 指令并行也可能会重排 —&gt; 内存系统也会重排 —-&gt; 执行<br /><strong>处理器在执行指令重排的时候，会考虑：数据之间的依赖性</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 1</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// 2</span>x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>y <span class="token operator">=</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span> <span class="token comment">// 4 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们所期望的：1234 但是可能执行的时候会变成 2134 或者 1324<br />但是不可能是 4123！</p><p>前提：a b x y 这四个值默认都是 0：<br />可能造成影响得到不同的结果：</p><table><thead><tr><th><strong>线程A</strong></th><th><strong>线程B</strong></th></tr></thead><tbody><tr><td>x &#x3D; a</td><td>y &#x3D; b</td></tr><tr><td>b &#x3D;1</td><td>a &#x3D; 2</td></tr></tbody></table><p>正常的结果：x &#x3D; 0; y &#x3D; 0; 但是可能由于指令重排出现以下结果：</p><table><thead><tr><th><strong>线程A</strong></th><th><strong>线程B</strong></th></tr></thead><tbody><tr><td>b &#x3D; 1</td><td>a &#x3D; 2</td></tr><tr><td>x &#x3D; a</td><td>y &#x3D; b</td></tr></tbody></table><p>指令重排导致的诡异结果： x &#x3D; 2; y &#x3D; 1;</p><p><strong>volatile</strong> 可以避免指令重排：<br />内存屏障。CPU指令。作用：</p><ol><li>保证特定操作的执行顺序！</li><li>可以保证某些变量的内存可见性 (利用这些特性<strong>volatile</strong> 实现了可见性)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650720299207-9a7446f3-5a5a-42fc-82cb-02449b30a7f5.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue8a9679e&margin=%5Bobject%20Object%5D&name=image.png&originHeight=571&originWidth=414&originalType=url&ratio=1&rotation=0&showTitle=false&size=46955&status=done&style=none&taskId=u812566bf-0051-4678-9928-3d084ec5702&title=" alt="image.png"><br /><strong>volatile 是可以保证可见性。不能保证原子性，由于内存屏障，可以保证避免指令重排的现象产生！</strong><br /><strong>volatile 内存屏障在单例模式中使用的最多！</strong></p><p><a name="rt9ZT"></a></p><h2 id="7-单例模式"><a href="#7-单例模式" class="headerlink" title="7. 单例模式"></a>7. 单例模式</h2><p><strong>饿汉式</strong> <strong>DCL懒汉式</strong>，深究！<br />饿汉式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//饿汉式单例</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//可能会浪费空间</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span>  <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Hungry</span> HUNGRY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Hungry</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  HUNGRY<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>DCL懒汉式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 懒汉式单例</span><span class="token comment">// 道高一尺，魔高一丈！</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> csp <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">// 标志位</span>    <span class="token comment">// 单例不安全，因为反射可以破坏单例，如下解决这个问题：</span>    <span class="token keyword">private</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">LazyMan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>csp <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                csp <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不要试图使用反射破坏异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 计算机指令执行顺序：     * 1. 分配内存空间     * 2、执行构造方法，初始化对象     * 3、把这个对象指向这个空间     *     * 期望顺序是：123     * 特殊情况下实际执行：132  ===>  此时 A 线程没有问题     *           若额外加一个 B 线程     *       此时lazyMan还没有完成构造     */</span>    <span class="token comment">// 原子性操作：避免指令重排</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> <span class="token class-name">LazyMan</span> lazyMan<span class="token punctuation">;</span>    <span class="token comment">// 双重检测锁模式的 懒汉式单例  DCL懒汉式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">LazyMan</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyMan<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">LazyMan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>lazyMan<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    lazyMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不是一个原子性操作</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> lazyMan<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 反射！</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//LazyMan instance = LazyMan.getInstance();</span>        <span class="token class-name">Field</span> qinjiang <span class="token operator">=</span> <span class="token class-name">LazyMan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"csp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qinjiang<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">LazyMan</span><span class="token punctuation">></span></span> declaredConstructor <span class="token operator">=</span>                <span class="token class-name">LazyMan</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//无视私有构造器</span>        <span class="token class-name">LazyMan</span> instance <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        qinjiang<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">LazyMan</span> instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态内部类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 静态内部类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Holder</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Holder</span> <span class="token function">getInstace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">InnerClass</span><span class="token punctuation">.</span>HOLDER<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Holder</span> HOLDER <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单例不安全，因为<a href="https://so.csdn.net/so/search?q=%E5%8F%8D%E5%B0%84&spm=1001.2101.3001.7020">反射</a>可以破坏单例<br />枚举</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// enum 是一个什么？ 本身也是一个Class类</span><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">EnumSingle</span> <span class="token punctuation">&#123;</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">EnumSingle</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchMethodException</span><span class="token punctuation">,</span> <span class="token class-name">IllegalAccessException</span><span class="token punctuation">,</span> <span class="token class-name">InvocationTargetException</span><span class="token punctuation">,</span> <span class="token class-name">InstantiationException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">EnumSingle</span> instance1 <span class="token operator">=</span> <span class="token class-name">EnumSingle</span><span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        <span class="token class-name">Constructor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">EnumSingle</span><span class="token punctuation">></span></span> declaredConstructor <span class="token operator">=</span> <span class="token class-name">EnumSingle</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">EnumSingle</span> instance2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// NoSuchMethodException: com.kuang.single.EnumSingle.&lt;init>()</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>instance2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="yYOB6"></a></p><h2 id="8-CAS"><a href="#8-CAS" class="headerlink" title="8. CAS"></a>8. CAS</h2><p>什么是 CAS<br />大厂你必须要深入研究底层！有所突破！ <strong>修内功，操作系统，计算机网络原理</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// CAS compareAndSet : 比较并交换！</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AtomicInteger</span> atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 期望、更新</span>        <span class="token comment">// public final boolean compareAndSet</span>        <span class="token comment">//(int expect, int update)</span>        <span class="token comment">// 如果我期望的值达到了，那么就更新，否则，</span>        <span class="token comment">// 就不更新, CAS 是CPU的并发原语！</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        atomicInteger<span class="token punctuation">.</span><span class="token function">getAndIncrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 看底层如何实现 ++</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Unsafe 类<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650727812167-a363a72d-3f1e-476a-b2c3-00368eb99a06.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u2af29bbe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=386&originWidth=886&originalType=url&ratio=1&rotation=0&showTitle=false&size=144743&status=done&style=none&taskId=u2c51c375-4fec-4760-a4bd-5a16e695b49&title=" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650728083353-a591027a-573c-43a8-aa18-8ea335c3fe5d.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u7b8909a0&margin=%5Bobject%20Object%5D&name=image.png&originHeight=498&originWidth=817&originalType=url&ratio=1&rotation=0&showTitle=false&size=208914&status=done&style=none&taskId=u75b796d0-44fd-4027-aeea-a066d9ba652&title=" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650728102105-167479de-d7f3-4696-81cf-249273ed22f6.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u8cbd854c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=247&originWidth=868&originalType=url&ratio=1&rotation=0&showTitle=false&size=67993&status=done&style=none&taskId=u6b54f058-b8b0-4c5a-a82d-878626ee563&title=" alt="image.png"><br />CAS ： 比较当前工作内存中的值和主内存中的值，如果这个值是期望的，那么则执行操作！如果不是就<br />一直循环！<br /><strong>缺点：</strong></p><ul><li>循环会耗时</li><li>一次性只能保证一个共享变量的原子性</li><li>会导致ABA问题</li></ul><hr><p>CAS ： ABA 问题（狸猫换太子）<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650728299862-e89549d6-f6fd-481d-a238-3d28e28a78a5.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u5b830da2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=395&originWidth=779&originalType=url&ratio=1&rotation=0&showTitle=false&size=44420&status=done&style=none&taskId=u067c4e93-9992-4c35-8854-22684746d4b&title=" alt="image.png"><br><a name="VHser"></a></p><h2 id="9-原子引用"><a href="#9-原子引用" class="headerlink" title="9. 原子引用"></a>9. 原子引用</h2><p>解决ABA 问题，引入原子引用！ 对应的思想：乐观锁！<br />带版本号 的原子操作！</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span> <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicStampedReference</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">&#123;</span>         <span class="token comment">/*         * AtomicStampedReference 注意，         * 如果泛型是一个包装类，注意对象的引用问题          * 正常在业务操作，这里面比较的都是一个个对象          */</span>                <span class="token comment">// 可以有一个初始对应的版本号 1</span>        <span class="token keyword">static</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>             atomicStampedReference <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">AtomicStampedReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// CAS compareAndSet : 比较并交换！ </span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                 <span class="token comment">// 获得版本号</span>                <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a1=>"</span><span class="token operator">+</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span>                                atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>                    <span class="token number">2020</span><span class="token punctuation">,</span>                     <span class="token number">2022</span><span class="token punctuation">,</span>                     atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 最新版本号</span>                    <span class="token comment">// 更新版本号</span>                    atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a2=>"</span>                         <span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                                         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                        atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>                            <span class="token number">2022</span><span class="token punctuation">,</span>                             <span class="token number">2020</span><span class="token punctuation">,</span>                             atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                             atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a3=>"</span>                         <span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 乐观锁的原理相同！ </span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                 <span class="token comment">// 获得版本号 </span>                <span class="token keyword">int</span> stamp <span class="token operator">=</span> atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b1=>"</span><span class="token operator">+</span>stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                     e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span>                                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                    atomicStampedReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>                        <span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">,</span> stamp<span class="token punctuation">,</span> stamp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                         <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b2=>"</span>                <span class="token operator">+</span>atomicStampedReference<span class="token punctuation">.</span><span class="token function">getStamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                              <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如图：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650729349807-c1ace8de-53c6-4bce-95c3-7aabd7fae9bb.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u73f1e107&margin=%5Bobject%20Object%5D&name=image.png&originHeight=251&originWidth=653&originalType=url&ratio=1&rotation=0&showTitle=false&size=21405&status=done&style=none&taskId=u481c7da6-4fda-4542-a38c-6a849f2797d&title=" alt="image.png"><br /><strong>注意：</strong><br /><strong>Integer 使用了对象缓存机制，默认范围是 -128 ~ 127 ，推荐使用静态工厂方法 valueOf 获取对象实例，而不是 new，因为 valueOf 使用缓存，而 new 一定会创建新的对象分配新的内存空间；</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650729539223-6e4bc243-3e3d-4382-ac34-6e59670ddc12.png##clientId=u1c9999ad-caf0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u7238d336&margin=%5Bobject%20Object%5D&name=image.png&originHeight=219&originWidth=783&originalType=url&ratio=1&rotation=0&showTitle=false&size=148608&status=done&style=none&taskId=u1a7b0d61-7786-48bf-89bb-d37bd926d5f&title=" alt="image.png"><br><a name="GoZPq"></a></p><h2 id="10-各种锁"><a href="#10-各种锁" class="headerlink" title="10. 各种锁"></a>10. 各种锁</h2><p><a name="AkbjE"></a></p><h6 id="1、公平锁、非公平锁"><a href="#1、公平锁、非公平锁" class="headerlink" title="1、公平锁、非公平锁"></a>1、公平锁、非公平锁</h6><p>公平锁： 非常公平， 不能够插队，必须先来后到！<br />非公平锁：非常不公平，可以插队 （默认都是非公平）<br /><strong>有参调用公平锁，无参调用非公平锁</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     sync <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> fair<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     sync <span class="token operator">=</span> fair <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">FairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">NonfairSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="Wbb6p"></a></p><h6 id="2-可重入锁"><a href="#2-可重入锁" class="headerlink" title="2. 可重入锁"></a>2. 可重入锁</h6><p>可重入锁（递归锁）<br /> <img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650816579939-ea83dc52-cc02-4203-84dc-65c162e9509c.png##clientId=ua2e1b0e1-44d3-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u50df55d3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=520&originWidth=841&originalType=url&ratio=1&rotation=0&showTitle=false&size=46189&status=done&style=none&taskId=udefd90c8-5b0f-4872-86c8-1db897c5d43&title=" alt="image.png"><br />Synchronized 版</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Synchronized</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">"sms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里也有锁(sms锁 里面的call锁)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token operator">+</span> <span class="token string">"call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>Lock 版</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Phone2</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone<span class="token punctuation">.</span><span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Phone2</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 细节问题：lock.lock(); lock.unlock();</span>        <span class="token comment">// lock 锁必须配对，否则就会死在里面</span>        <span class="token comment">// 两个lock() 就需要两次解锁</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">"sms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里也有锁</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span> <span class="token string">"call"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="mSlJQ"></a></p><h6 id="3-自旋锁"><a href="#3-自旋锁" class="headerlink" title="3.自旋锁"></a>3.自旋锁</h6><p>spinlock<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650817753795-e9fe0ab8-f852-477a-b2a7-0a853fdfe481.png##clientId=ua2e1b0e1-44d3-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u63722cf3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=278&originWidth=828&originalType=url&ratio=1&rotation=0&showTitle=false&size=81226&status=done&style=none&taskId=u86f37346-94fe-4b22-a60c-7de7e6b98d8&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicReference</span><span class="token punctuation">;</span><span class="token comment">/** * 自旋锁 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpinLockDemo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// int   0</span>    <span class="token comment">// Thread  null</span>    <span class="token comment">// 原子引用</span>    <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Thread</span><span class="token punctuation">></span></span> atomicReference <span class="token operator">=</span>            <span class="token keyword">new</span> <span class="token class-name">AtomicReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 加锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token string">"==> mylock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 自旋锁</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>thread<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 解锁</span>    <span class="token comment">// 加锁</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token operator">+</span> <span class="token string">"==> myUnlock"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        atomicReference<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>thread<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解锁</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试类代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSpinlock</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span>            <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span><span class="token comment">//        ReentrantLock reentrantLock = new ReentrantLock();</span><span class="token comment">//        reentrantLock.lock();</span><span class="token comment">//        reentrantLock.unlock();</span>        <span class="token comment">// 底层使用的自旋锁CAS</span>        <span class="token class-name">SpinLockDemo</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpinLockDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 定义锁</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 加锁</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 解锁</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">myLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                lock<span class="token punctuation">.</span><span class="token function">myUnLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="znnsD"></a></p><h6 id="4-死锁"><a href="#4-死锁" class="headerlink" title="4. 死锁"></a>4. 死锁</h6><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650818520176-081bbea2-6a60-4017-b086-4e3d62d4c963.png##clientId=ua2e1b0e1-44d3-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u79df3079&margin=%5Bobject%20Object%5D&name=image.png&originHeight=465&originWidth=819&originalType=url&ratio=1&rotation=0&showTitle=false&size=73246&status=done&style=none&taskId=u684eb0c6-4ff9-4c2f-82e0-e8a60165a3f&title=" alt="image.png"></p>]]></content>
      
      
      <categories>
          
          <category> Java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统中如何收发网络包</title>
      <link href="/2022/04/21/Linux%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E6%94%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E5%8C%85/"/>
      <url>/2022/04/21/Linux%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E6%94%B6%E5%8F%91%E7%BD%91%E7%BB%9C%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><img src="https://cdn.nlark.com/yuque/0/2022/jpeg/26758626/1651158328581-c1446e72-adc1-4a33-92de-107670e352d6.jpeg"></p>]]></content>
      
      
      <categories>
          
          <category> 计网 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计网 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发编程(上)</title>
      <link href="/2022/04/21/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B(%E4%B8%8A)/"/>
      <url>/2022/04/21/JUC%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><p><a name="lvnCB"></a></p><h2 id="1-进程和线程"><a href="#1-进程和线程" class="headerlink" title="1. 进程和线程"></a>1. 进程和线程</h2><ul><li><strong>进程</strong>：一个程序，QQ.exe Music.exe 程序的集合；</li><li>一个进程往往可以包含多个线程，至少包含一个！</li><li>Java<strong>默认有2个线程</strong>： main、GC</li><li><strong>线程</strong>：开了一个进程 Typora，写字，自动保存（线程负责的）</li><li>对于Java而言提供了：Thread、Runnable、Callable操作线程。</li></ul><p><strong>java无法直接开启线程，是通过调用本地方法开启</strong></p><hr><p>并发和并行<br />并发编程：并发、并行<br /><strong>并发</strong>（多线程操作同一个资源）</p><ul><li>一核CPU，模拟出来多条线程，快速交替。</li></ul><p><strong>并行</strong>（多个人一起行走）</p><ul><li>多核CPU ，多个线程可以同时执行； eg: 线程池！</li></ul><hr><p>线程有几个状态（6个）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**    * Thread state for a thread which has not yet started.    * 线程新生状态    */</span>    NEW<span class="token punctuation">,</span>    <span class="token comment">/**    * 线程运行中    */</span>    RUNNABLE<span class="token punctuation">,</span>    <span class="token comment">/**    * 线程阻塞状态    */</span>    BLOCKED<span class="token punctuation">,</span>    <span class="token comment">/**    * 线程等待状态，死等    */</span>    WAITING<span class="token punctuation">,</span>     <span class="token comment">/*    * 线程超时等待状态，超过一定时间就不再等    */</span>    TIMED_WAITING<span class="token punctuation">,</span>    <span class="token comment">/**    * Thread state for a terminated thread.    * The thread has completed execution.    * 线程终止状态，代表线程执行完毕    */</span>    TERMINATED<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>wait&#x2F;sleep 区别<br /><strong>1、二者来自不同的类</strong></p><ul><li>wait &#x3D;&gt; Object</li><li>sleep &#x3D;&gt; Thread</li></ul><p><strong>2、关于锁的释放</strong></p><ul><li>wait 会释放锁</li><li>sleep 睡觉了，抱着锁睡觉，不会释放！</li></ul><p><strong>3、使用的范围是不同的</strong></p><ul><li><strong>wait 必须在同步代码块中使用</strong></li><li>sleep 可以再任何地方睡眠<br><a name="CuZ5u"></a></li></ul><h2 id="2-Synchronized-锁"><a href="#2-Synchronized-锁" class="headerlink" title="2. Synchronized 锁"></a>2. Synchronized 锁</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>demo1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicketDemo01</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*     * 真正的多线程开发，公司中的开发，降低耦合性     * 线程就是一个单独的资源类，没有任何附属的操作！     * 1、 属性、方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//并发：多个线程同时操作一个资源类，把资源类丢入线程</span>        <span class="token class-name">Ticket</span> ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//资源类</span><span class="token keyword">class</span> <span class="token class-name">Ticket</span><span class="token punctuation">&#123;</span>    <span class="token comment">//属性、方法</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token comment">//卖票方法</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了"</span> <span class="token operator">+</span>                    <span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">--</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票，剩余:"</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="mR4HI"></a></p><h2 id="3-Lock锁"><a href="#3-Lock锁" class="headerlink" title="3. Lock锁"></a>3. Lock锁</h2><ul><li><strong>公平锁：十分公平，线程执行顺序按照先来后到顺序</strong></li><li><strong>非公平锁：十分不公平：可以插队 （默认锁）</strong></li></ul><p>将上面的卖票例子用lock锁 替换synchronized：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>demo1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SaleTicketDemo02</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*     * 真正的多线程开发，公司中的开发，降低耦合性     * 线程就是一个单独的资源类，没有任何附属的操作！     * 1、 属性、方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//并发：多个线程同时操作一个资源类，把资源类丢入线程</span>        <span class="token class-name">Ticket2</span> ticket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ticket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ticket<span class="token punctuation">.</span><span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//资源类</span><span class="token comment">//Lock 3步骤</span><span class="token comment">// 1. new ReentrantLock();</span><span class="token comment">// 2. lock.lock()  加锁</span><span class="token comment">// 3. lock.unlock() 解锁</span><span class="token keyword">class</span> <span class="token class-name">Ticket2</span><span class="token punctuation">&#123;</span>    <span class="token comment">//属性、方法</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//卖票方法</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">sale</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出了"</span> <span class="token operator">+</span>                        <span class="token punctuation">(</span><span class="token number">50</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token operator">--</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"张票，剩余:"</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">"张票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Synchronized 和 Lock 区别：</p><ul><li>1、Synchronized 内置的Java关键字， Lock 是一个Java类</li><li>2、Synchronized 无法判断获取锁的状态，Lock 可以判断是否获取到了锁</li><li>3、Synchronized 会自动释放锁，lock 必须要手动释放锁！如果不释放锁，<strong>死锁</strong></li><li>4、Synchronized 线程 1（获得锁，如果线程1阻塞）、线程2（等待，傻傻的等）；Lock锁就不一定会等待下去；</li><li>5、Synchronized <strong>可重入锁，不可以中断的，非公平</strong>；Lock ，<strong>可重入锁，可以判断锁，非公平</strong>（可以自己设置）；</li><li>6、Synchronized 适合锁少量的代码同步问题，Lock 适合锁大量的同步代码！<br><a name="YbECY"></a></li></ul><h2 id="4-生产者消费者问题"><a href="#4-生产者消费者问题" class="headerlink" title="4. 生产者消费者问题"></a>4. 生产者消费者问题</h2><p><a name="VyvjG"></a></p><h6 id="Synchronize版"><a href="#Synchronize版" class="headerlink" title="Synchronize版"></a>Synchronize版</h6><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pc</span><span class="token punctuation">;</span><span class="token comment">/*** 线程之间的通信问题：生产者和消费者问题！  等待唤醒，通知唤醒* 线程交替执行  A   B 操作同一个变量   num = 0* A num+1* B num-1*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Data</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 判断等待，业务，通知</span><span class="token keyword">class</span> <span class="token class-name">Data</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 数字 资源类</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//+1</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*        假设 number此时等于1，即已经被生产了产品                如果这里用的是if判断，如果此时A,C两个生产者线程争夺increment()方法执行权                假设A拿到执行权，经过判断number!=0成立，则A.wait()开始等待（wait()会释放锁），然后C试图去执行        生产方法，但依然判断number!=0成立，则B.wait()开始等待（wait()会释放锁）                碰巧这时候消费者线程线程B/D去消费了一个产品，使number=0然后，B/D消费完后调用this.notifyAll();                这时候2个等待中的生产者线程继续生产产品，而此时number++ 执行了2次                同理，重复上述过程，生产者线程继续wait()等待，消费者调用this.notifyAll();        然后生产者继续超前生产，最终导致‘产能过剩’，即number大于1        if(number != 0)&#123;        // 等待        this.wait();        &#125;*/</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 注意这里不可以用if 否则会出现虚假唤醒问题，解决方法将if换成while</span>            <span class="token comment">// 等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        number<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通知其他线程，我+1完毕了</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//-1</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 等待</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        number<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 通知其他线程，我-1完毕了</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不用while会导致虚假唤醒</li></ul><p><a name="MwZzS"></a></p><h6 id="Lock-版"><a href="#Lock-版" class="headerlink" title="Lock 版"></a>Lock 版</h6><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650297249426-d3438c7a-eea2-4a5e-b084-d378ae4f8247.png##clientId=uc0d6b3bc-e16b-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u50319e41&margin=%5Bobject%20Object%5D&name=image.png&originHeight=230&originWidth=732&originalType=url&ratio=1&rotation=0&showTitle=false&size=41762&status=done&style=none&taskId=ue3dc9de1-8cd3-4432-81d3-e0737053e4c&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token comment">/** * 线程之间的通信问题：生产者和消费者问题！  等待唤醒，通知唤醒 * 线程交替执行  A   B 操作同一个变量   num = 0 * A num+1 * B num-1 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Data2</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    data<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    data<span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"D"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Data2</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Condition</span> condition <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//+1</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 业务代码</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 等待</span>                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            number<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 通知其他线程，我+1完毕了</span>            condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//-1</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 等待</span>                condition<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            number<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>"</span> <span class="token operator">+</span> number<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 通知其他线程，我-1完毕了</span>            condition<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>任何一个新的技术，绝对不是仅仅只是覆盖了原来的技术，是有其对旧技术的优势和补充！</strong></p><blockquote><p><strong>Condition 精准通知</strong></p></blockquote><p><strong>问题：ABCD线程 抢占执行的顺序是随机的，如果想让ABCD线程有序执行，该如何改进代码？</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pc</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Locale</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Condition</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">Lock</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>locks<span class="token punctuation">.</span></span><span class="token class-name">ReentrantLock</span><span class="token punctuation">;</span><span class="token comment">/* * A 执行完调用B，B执行完调用C，C执行完调用A */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Data3</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Data3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                data<span class="token punctuation">.</span><span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                data<span class="token punctuation">.</span><span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                data<span class="token punctuation">.</span><span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Data3</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 资源类 Lock</span>    <span class="token keyword">private</span> <span class="token class-name">Lock</span> lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> condition1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> condition2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Condition</span> condition3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// number=1 A执行  number=2 B执行 number=3 C执行</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 业务，判断-> 执行-> 通知</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// A等待</span>                condition1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>AAAAAAA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 唤醒，唤醒指定的人，B</span>            number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            condition2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 业务，判断-> 执行-> 通知</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// B等待</span>                condition2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>BBBBBBBBB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 唤醒，唤醒指定的人，c</span>            number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            condition3<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printC</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 业务，判断-> 执行-> 通知</span>            <span class="token comment">// 业务，判断-> 执行-> 通知</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// C等待</span>                condition3<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"=>CCCCC "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 唤醒，唤醒指定的人，A</span>            number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            condition1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="l4eKP"></a></p><h2 id="5-八锁现象"><a href="#5-八锁现象" class="headerlink" title="5. 八锁现象"></a>5. 八锁现象</h2><p><strong>synchronized 锁的对象是方法的调用者</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lock8</span><span class="token punctuation">;</span><span class="token comment">/** * 8锁，就是关于锁的8个问题 * 1、标准情况下，两个线程先打印 发短信还是 先打印 打电话？ 1/发短信  2/打电话 * 1、sendSms延迟4秒，两个线程先打印 发短信还是 打电话？ 1/发短信  2/打电话 */</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Phone</span> phone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 锁的存在</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 捕获</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span>    <span class="token comment">// synchronized 锁的对象是方法的调用者！、</span>    <span class="token comment">// 两个方法用的是同一个对象调用(同一个锁)，谁先拿到锁谁执行！</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 抱着锁睡眠</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 先执行 发短信，后执行打电话</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>普通方法没有锁！不是同步方法，就不受锁的影响，正常执行</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lock8</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 3、 增加了一个普通方法后！先执行发短信还是Hello？// 普通方法 * 4、 两个对象，两个同步方法， 发短信还是 打电话？ // 打电话 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test2</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 两个对象，两个调用者，两把锁！</span>        <span class="token class-name">Phone2</span> phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone2</span> phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//锁的存在</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone1<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 捕获</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone2<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Phone2</span><span class="token punctuation">&#123;</span>    <span class="token comment">// synchronized 锁的对象是方法的调用者！</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 这里没有锁！不是同步方法，不受锁的影响</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 先执行打电话，接着执行hello，最后执行发短信</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>**不同实例对象的Class类模板只有一个，static静态的同步方法，锁的是Class **</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lock8</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 5、增加两个静态的同步方法，只有一个对象，先打印 发短信？打电话？ * 6、两个对象！增加两个静态的同步方法， 先打印 发短信？打电话？ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test3</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 两个对象的Class类模板只有一个，static，锁的是Class</span>        <span class="token class-name">Phone3</span> phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone3</span> phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//锁的存在</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone1<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 捕获</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Phone3唯一的一个 Class 对象</span><span class="token keyword">class</span> <span class="token class-name">Phone3</span><span class="token punctuation">&#123;</span>    <span class="token comment">// synchronized 锁的对象是方法的调用者！</span>    <span class="token comment">// static 静态方法</span>    <span class="token comment">// 类一加载就有了！锁的是Class</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 先执行发短信，后执行打电话</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>lock8</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 7、1个静态的同步方法，1个普通的同步方法 ，一个对象，先打印 发短信？打电话？ * 8、1个静态的同步方法，1个普通的同步方法 ，两个对象，先打印 发短信？打电话？ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test4</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 两个对象的Class类模板只有一个，static，锁的是Class</span>        <span class="token class-name">Phone4</span> phone1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Phone4</span> phone2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//锁的存在</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone1<span class="token punctuation">.</span><span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 捕获</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            phone2<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Phone3唯一的一个 Class 对象</span><span class="token keyword">class</span> <span class="token class-name">Phone4</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 静态的同步方法 锁的是 Class 类模板</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">sendSms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 普通的同步方法  锁的调用者(对象),二者锁的对象不同,所以不需要等待</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 7/8 两种情况下，都是先执行打电话,后执行发短信,因为二者锁的对象不同,</span><span class="token comment">// 静态同步方法锁的是Class类模板,普通同步方法锁的是实例化的对象,</span><span class="token comment">// 所以不用等待前者解锁后 后者才能执行,而是两者并行执行,因为发短信休眠4s</span><span class="token comment">// 所以打电话先执行。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="KD7KF"></a></p><h2 id="6-集合类不安全"><a href="#6-集合类不安全" class="headerlink" title="6. 集合类不安全"></a>6. 集合类不安全</h2><blockquote><p><strong>List 不安全</strong></p></blockquote><p>**List、ArrayList 等在并发多线程条件下，不能实现数据共享，多个线程同时调用一个list对象时候就会出现并发修改异常ConcurrentModificationException **。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>unsafe</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Array</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CopyOnWriteArrayList</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 并发下 ArrayList 不安全，要Synchronized；</span>        <span class="token comment">/*         * 解决方案；         * 方案1、List&lt;String> list = new Vector&lt;>();         * 方案2、List&lt;String> list =         * Collections.synchronizedList(new ArrayList&lt;>());         * 方案3、List&lt;String> list = new CopyOnWriteArrayList&lt;>()；    //写入时复制         */</span>        <span class="token comment">/* CopyOnWrite 写入时复制  COW  计算机程序设计领域的一种优化策略；         * 多个线程调用的时候，list，读取的时候，固定的，写入（覆盖）         * 在写入的时候避免覆盖，造成数据问题！         * 读写分离         * CopyOnWriteArrayList  比 Vector Nb 在哪里？         */</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>Set不安全</p></blockquote><p>Set、Hash 等在并发多线程条件下，不能实现数据共享，多个线程同时调用一个set对象时候就会出现并发修改异常ConcurrentModificationException </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>unsafe</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CopyOnWriteArraySet</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 同理可证 ： ConcurrentModificationException 并发修改异常    * 1、Set&lt;String> set =     * Collections.synchronizedSet(new HashSet&lt;>());    * 2、         */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        Set&lt;String> set = new HashSet&lt;>();//不安全</span>        <span class="token comment">// Set&lt;String> set = Collections.synchronizedSet(new HashSet&lt;>());//安全</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArraySet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//安全</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">30</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>扩展：hashSet 底层是什么？</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650370404054-be4e42fc-ef6e-46c5-8c1d-0b5151a85ad5.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ud0b37dbe&margin=%5Bobject%20Object%5D&name=image.png&originHeight=227&originWidth=817&originalType=url&ratio=1&rotation=0&showTitle=false&size=33012&status=done&style=none&taskId=u3e23540e-8ccd-4443-9334-e71c8c239fe&title=" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650370404244-8d47592f-1566-46ee-816a-fd23fed8fcaf.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u7872cf8b&margin=%5Bobject%20Object%5D&name=image.png&originHeight=426&originWidth=795&originalType=url&ratio=1&rotation=0&showTitle=false&size=72768&status=done&style=none&taskId=ucdc655b4-ca49-4f6c-be79-2e18028b370&title=" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650370404490-ecdc3d0d-10e4-42db-b1e6-9777d232ecc6.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ubbf7801c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=477&originWidth=801&originalType=url&ratio=1&rotation=0&showTitle=false&size=77905&status=done&style=none&taskId=uc8e3bc54-b9b1-494b-8bf5-973d6dbcbdc&title=" alt="image.png"><br /><strong>可以看出 HashSet 的底层就是一个HashMap</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650370404232-ad68503f-40dc-41a9-86b9-534fe3c4655c.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u67dbda7f&margin=%5Bobject%20Object%5D&name=image.png&originHeight=231&originWidth=647&originalType=url&ratio=1&rotation=0&showTitle=false&size=40976&status=done&style=none&taskId=ua7881978-5c56-456a-9228-599ea3030ce&title=" alt="image.png"></p><hr><blockquote><p>Map不安全</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650371014832-4594b8aa-aad3-4a78-94c0-3f4319fabd68.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u7cbfa984&margin=%5Bobject%20Object%5D&name=image.png&originHeight=345&originWidth=586&originalType=url&ratio=1&rotation=0&showTitle=false&size=120966&status=done&style=none&taskId=uebca1532-41d3-406e-841f-a25c3282e4a&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>unsafe</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>desktop<span class="token punctuation">.</span></span><span class="token class-name">ScreenSleepEvent</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>UUID<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MapTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// map 是这样用的吗？ 不是，工作中不用 HashMap</span>        <span class="token comment">// 默认等价于什么？  new HashMap&lt;>(16,0.75);</span>        <span class="token comment">// Map&lt;String, String> map = new HashMap&lt;>();</span>        <span class="token comment">// 扩展：研究ConcurrentHashMap的原理</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="NZtyI"></a></p><h2 id="7-Callable"><a href="#7-Callable" class="headerlink" title="7. Callable"></a>7. Callable</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650371591075-275f248a-a391-4fec-958f-e92e60dd38cb.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u8f9d4e50&margin=%5Bobject%20Object%5D&name=image.png&originHeight=550&originWidth=1033&originalType=url&ratio=1&rotation=0&showTitle=false&size=44700&status=done&style=none&taskId=uce1a1817-64ac-49a1-82a8-c73cb788858&title=" alt="image.png"></p><ul><li><strong>Callable</strong> 是 java.util 包下 concurrent 下的接口，有返回值，可以抛出被检查的异常</li><li><strong>Runable</strong> 是 java.lang 包下的接口，没有返回值，不可以抛出被检查的异常</li><li>二者调用的方法不同，<strong>run</strong>()&#x2F; <strong>call</strong>()</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Callable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ExecutionException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">FutureTask</span><span class="token punctuation">;</span><span class="token comment">/** * 1、探究原理 * 2、觉自己会用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CallableTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// new Thread(new Runnable()).start();// 启动Runnable</span>        <span class="token comment">// new Thread(new FutureTask&lt;V>()).start();</span>        <span class="token comment">// new Thread(new FutureTask&lt;V>( Callable )).start();</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 怎么启动Callable？</span>        <span class="token comment">// new 一个MyThread实例</span>        <span class="token class-name">MyThread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// MyThread实例放入FutureTask</span>        <span class="token class-name">FutureTask</span> futureTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 适配类</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>futureTask<span class="token punctuation">,</span><span class="token string">"B"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// call()方法结果会被缓存，提高效率，因此只打印1个call</span>        <span class="token comment">// 这个get 方法可能会产生阻塞！把他放到最后</span>        <span class="token class-name">Integer</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> futureTask<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 或者使用异步通信来处理！</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1024</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"call()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// A,B两个线程会打印几个call？（1个）</span>        <span class="token comment">// 耗时的操作</span>        <span class="token keyword">return</span> <span class="token number">1024</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//class MyThread implements Runnable &#123;</span><span class="token comment">//</span><span class="token comment">//    @Override</span><span class="token comment">//    public void run() &#123;</span><span class="token comment">//        System.out.println("run()"); // 会打印几个run</span><span class="token comment">//    &#125;</span><span class="token comment">//&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="rAbbL"></a></p><h2 id="8-常用的辅助类"><a href="#8-常用的辅助类" class="headerlink" title="8. 常用的辅助类"></a>8. 常用的辅助类</h2><p><a name="ii8Am"></a></p><h4 id="8-1-CountDownLatch"><a href="#8-1-CountDownLatch" class="headerlink" title="8.1 CountDownLatch"></a>8.1 CountDownLatch</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650372345263-5b1a243d-a2c4-4826-a0ee-257f7e3040b9.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue7750629&margin=%5Bobject%20Object%5D&name=image.png&originHeight=623&originWidth=1039&originalType=url&ratio=1&rotation=0&showTitle=false&size=70791&status=done&style=none&taskId=u15ee06a3-cdcd-4493-8908-bc49b5ea303&title=" alt="image.png"><br /><strong>减法计数器： 实现调用几次线程后 再触发某一个任务</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 计数器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 总数是6，必须要执行任务的时候，再使用！</span>        <span class="token class-name">CountDownLatch</span> countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">+</span><span class="token string">" Go out"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数量-1</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待计数器归零，然后再向下执行</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Close Door"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：6条线程跑完，才往下执行<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650372595589-f98028a6-8e46-4866-b9e0-f7528d7090ad.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=336&id=ua51aa99c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=336&originWidth=899&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23796&status=done&style=none&taskId=u95a459e6-31b4-4803-8fe0-51e03d904f2&title=&width=899" alt="image.png"><br />原理：<br />countDownLatch.countDown(); &#x2F;&#x2F; 数量-1<br />countDownLatch.await(); &#x2F;&#x2F; 等待计数器归零，然后再向下执行<br />每次有线程调用 <strong>countDown</strong>() 数量-1，假设计数器变为0，<strong>countDownLatch.await</strong>() 就会被唤醒，继续执行！<br><a name="QNBTv"></a></p><h4 id="8-2-CyclicBarrier"><a href="#8-2-CyclicBarrier" class="headerlink" title="8.2 CyclicBarrier"></a>8.2 CyclicBarrier</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650372664657-64f4d2fa-c715-41b0-aeb4-69a51c8d695f.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue8c077e9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=628&originWidth=1006&originalType=url&ratio=1&rotation=0&showTitle=false&size=61271&status=done&style=none&taskId=udff23e66-bb91-4af1-909b-933671c10f8&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>add</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BrokenBarrierException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">CyclicBarrier</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">CyclicBarrierDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*         * 集齐7颗龙珠召唤神龙         */</span>        <span class="token comment">// 召唤龙珠的线程</span>        <span class="token class-name">CyclicBarrier</span> cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"召唤神龙成功！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">15</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment">// lambda能操作到 i 吗</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">+</span><span class="token string">"收集"</span><span class="token operator">+</span>temp<span class="token operator">+</span><span class="token string">"个龙珠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="cnAvF"></a></p><h4 id="8-3-Semaphore"><a href="#8-3-Semaphore" class="headerlink" title="8.3 Semaphore"></a>8.3 Semaphore</h4><p>Semaphore：信号量<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650373357362-27256f64-f356-4e64-940e-6332c809ef2a.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u78a333e3&margin=%5Bobject%20Object%5D&name=image.png&originHeight=637&originWidth=1016&originalType=url&ratio=1&rotation=0&showTitle=false&size=62903&status=done&style=none&taskId=u896cc992-6fa1-4fc8-ae40-6314baa33d7&title=" alt="image.png"><br /><strong>举例：限流&#x2F;抢车位！6车—3个停车位置</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>add</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Semaphore</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 线程数量：停车位! 限流！、</span>        <span class="token comment">// 如果已有3个线程执行（3个车位已满），则其他线程需要等待‘车位’释放后，才能执行！</span>        <span class="token class-name">Semaphore</span> semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span><span class="token number">6</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                <span class="token comment">// acquire() 得到</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"抢到车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"离开车位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// release() 释放</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650373512723-4cac9dfa-7dc7-499e-9358-1151b4143829.png##clientId=ubde1c453-e9ed-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=302&id=ub5c735e9&margin=%5Bobject%20Object%5D&name=image.png&originHeight=302&originWidth=1260&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18225&status=done&style=none&taskId=u8abc13fc-d860-458a-a4e7-f3a0068942e&title=&width=1260" alt="image.png"><br /><strong>原理：</strong><br />semaphore.acquire(); 获得，假设如果已经满了，等待，等待被释放为止！semaphore.release(); 释放，会将当前的信号量释放 + 1，然后唤醒等待的线程！<br />作用： 多个共享资源互斥的使用！并发限流，控制最大的线程数！<br><a name="NSU56"></a></p><h2 id="9-读写锁"><a href="#9-读写锁" class="headerlink" title="9. 读写锁"></a>9. 读写锁</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650454788562-1dba2994-ea37-4024-9ede-85b042590161.png##clientId=ud8c13f96-51d0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u51f74532&margin=%5Bobject%20Object%5D&name=image.png&originHeight=481&originWidth=991&originalType=url&ratio=1&rotation=0&showTitle=false&size=53685&status=done&style=none&taskId=u076c78c5-f240-4c5b-96a3-8844bba8af2&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 独占锁（写锁） 一次只能被一个线程占有 * 共享锁（读锁） 多个线程可以同时占有 * ReadWriteLock * 读-读  可以共存！ * 读-写  不能共存！ * 写-写  不能共存！ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReadWriteLockDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//MyCache myCache = new MyCache();</span>        <span class="token class-name">MyCacheLock</span> myCacheLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyCacheLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 写入</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                myCacheLock<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">,</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 读取</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">final</span> <span class="token keyword">int</span> temp <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                myCacheLock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>temp<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 自定义缓存 * 加锁的 */</span><span class="token keyword">class</span> <span class="token class-name">MyCacheLock</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 读写锁： 更加细粒度的控制</span>    <span class="token keyword">private</span> <span class="token class-name">ReadWriteLock</span> readWriteLock <span class="token operator">=</span> <span class="token keyword">new</span>            <span class="token class-name">ReentrantReadWriteLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// private Lock lock = new ReentrantLock();</span>    <span class="token comment">// 存，写入的时候，只希望同时只有一个线程写</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span><span class="token string">"写入"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span><span class="token string">"写入OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">writeLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 取，读，所有人都可以读！</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span><span class="token string">"读取"</span><span class="token operator">+</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> o <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token operator">+</span><span class="token string">"读取OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            readWriteLock<span class="token punctuation">.</span><span class="token function">readLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="qYOtN"></a></p><h2 id="10-阻塞队列"><a href="#10-阻塞队列" class="headerlink" title="10. 阻塞队列"></a>10. 阻塞队列</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650456006939-723f4bf6-0fbf-41c6-bf68-5590dcc5e150.png##clientId=ud8c13f96-51d0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u4cb717f8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=303&originWidth=571&originalType=url&ratio=1&rotation=0&showTitle=false&size=38983&status=done&style=none&taskId=u1265d4c7-7864-48c0-96e9-53ce7a830ca&title=" alt="image.png"><br><a name="CPkmH"></a></p><h4 id="10-1-BlockingQueue"><a href="#10-1-BlockingQueue" class="headerlink" title="10.1 BlockingQueue"></a>10.1 BlockingQueue</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650456039008-63bcb8ab-3672-4890-8caf-eff5cad2ea3f.png##clientId=ud8c13f96-51d0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uf3420d6c&margin=%5Bobject%20Object%5D&name=image.png&originHeight=517&originWidth=1007&originalType=url&ratio=1&rotation=0&showTitle=false&size=41393&status=done&style=none&taskId=ue8a790f4-981c-462b-81ce-cf7d743b87a&title=" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650456111121-3e5097e0-7c8f-4a73-8d5d-883005556397.png##clientId=ud8c13f96-51d0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc8e0bf94&margin=%5Bobject%20Object%5D&name=image.png&originHeight=327&originWidth=613&originalType=url&ratio=1&rotation=0&showTitle=false&size=101572&status=done&style=none&taskId=ub2fa94bf-3d3e-4a4f-aaf6-a6cb0e8361e&title=" alt="image.png"><br /><strong>关系图</strong><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650456126886-bbe77b2e-b370-4998-9ab2-067d3b313e87.png##clientId=ud8c13f96-51d0-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue1d2aad4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=533&originWidth=757&originalType=url&ratio=1&rotation=0&showTitle=false&size=68653&status=done&style=none&taskId=udf934d32-51f3-4a39-bde1-a5180a29e9c&title=" alt="image.png"></p><p>什么情况下我们会使用 阻塞队列?：多线程并发处理，线程池用的较多 ！<br /><strong>学会使用队列</strong><br />添加、移除<br /><strong>四组API</strong></p><table><thead><tr><th><strong>方式</strong></th><th><strong>抛出异常</strong></th><th><strong>有返回值，不抛出异常</strong></th><th><strong>阻塞 等待</strong></th><th><strong>超时等待（过了设置等待的时间就不等了）</strong></th></tr></thead><tbody><tr><td>添加</td><td>add</td><td>offer()</td><td>put()</td><td>offer(,)</td></tr><tr><td>移除</td><td>remove</td><td>poll()</td><td>take()</td><td>poll(,)</td></tr><tr><td>检测队首元素</td><td>element</td><td>peek()</td><td>-</td><td>-</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>bq</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>pc<span class="token punctuation">.</span></span><span class="token class-name">A</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collection</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">ArrayBlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 1. 无返回值，抛出异常的方式     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 队列的大小</span>        <span class="token class-name">ArrayBlockingQueue</span> blockingQueue <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>        <span class="token comment">// System.out.println(blockingQueue.add("d"));</span>        <span class="token comment">// IllegalStateException: Queue full 抛出异常---队列已满！</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">element</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token comment">// 查看队首元素是谁</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//</span>        <span class="token comment">// System.out.println(blockingQueue.remove());</span>        <span class="token comment">// java.util.NoSuchElementException 抛出异常---队列已为空！</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 2. 有返回值，不抛出异常的方式     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 队列的大小</span>        <span class="token class-name">ArrayBlockingQueue</span> blockingQueue <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// System.out.println(blockingQueue.offer("d"));</span>        <span class="token comment">// false 不抛出异常！</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// null  不抛出异常！</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 3. 等待，阻塞（一直阻塞）     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 队列的大小</span>        <span class="token class-name">ArrayBlockingQueue</span> blockingQueue <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 一直阻塞</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// blockingQueue.put("d"); // 队列没有位置了，一直阻塞等待</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 没有这个元素，一直阻塞等待</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 4. 等待，阻塞（等待超时）     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 队列的大小</span>        <span class="token class-name">ArrayBlockingQueue</span> blockingQueue <span class="token operator">=</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         blockingQueue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 等待超过2秒就退出</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"==============="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blockingQueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待超过2秒就退出</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="EjTCt"></a></p><h4 id="10-2-Synchronous-Queue-同步队列"><a href="#10-2-Synchronous-Queue-同步队列" class="headerlink" title="10.2 Synchronous Queue(同步队列)"></a>10.2 Synchronous Queue(同步队列)</h4><p>SynchronousQueue 同步队列<br /><strong>没有容量，进去一个元素，必须等待取出来之后，才能再往里面放一个元素！</strong><br />put、take</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sq</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">BlockingQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">SynchronousQueue</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span><span class="token punctuation">;</span><span class="token comment">/** * 同步队列: * 和其他的BlockingQueue 不一样， SynchronousQueue 不存储元素 * put了一个元素，必须从里面先take取出来，否则不能在put进去值！ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SychronousQueueDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> blockingQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 同步队列</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" put 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// put进入一个元素</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" put 2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">" put 3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                blockingQueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"T1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 睡眠3s取出一个元素</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"=>"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"=>"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token string">"=>"</span><span class="token operator">+</span>blockingQueue<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token string">"T2"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果：</strong><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650458558669-758ec15a-b1d7-450d-a4a9-f3f6123ea4de.png##clientId=ud8c13f96-51d0-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=274&id=u66e8ca57&margin=%5Bobject%20Object%5D&name=image.png&originHeight=274&originWidth=1192&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25131&status=done&style=none&taskId=ub7db8db3-a69b-4e93-9371-cdf7c393aff&title=&width=1192" alt="image.png"><br />这里结果并没有像我们想的那样，一次只能put1个，取完之后再put。经查阅资料后发现，原来是因为打印线程也会抢占资源，而紧跟在blockingqueue后的下一条打印语句，先打印出来了而已，<strong>实际上2并没有进入同步队列</strong>。</p><p><a name="r9ZMW"></a></p><h2 id="11-线程池"><a href="#11-线程池" class="headerlink" title="11. 线程池"></a>11. 线程池</h2><p><strong>线程池：3大方法、7大参数、4种拒绝策略</strong><br />池化技术<br />程序的运行，本质：占用系统的资源！ （优化资源的使用 &#x3D;&gt; 池化技术）<br />线程池、连接池、内存池、对象池&#x2F;&#x2F;&#x2F;… 创建、销毁。十分浪费资源<br />池化技术：事先准备好一些资源，有人要用，就来我这里拿，用完之后还给我。</p><p>线程池的好处:</p><ul><li>1、降低系统资源的消耗</li><li>2、提高响应的速度</li><li>3、方便管理</li></ul><p><strong>线程复用、可以控制最大并发数、管理线程</strong></p><p><a name="ffc2Y"></a></p><h4 id="三大方法"><a href="#三大方法" class="headerlink" title="三大方法"></a>三大方法</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650528116064-de0bfe9e-4d1d-4577-9adf-e136cc680f29.png##clientId=u82aecd82-c0c1-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u0e11fdc4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=218&originWidth=670&originalType=url&ratio=1&rotation=0&showTitle=false&size=113268&status=done&style=none&taskId=u1a77ad81-c586-4e85-82fe-3ad39ec53b5&title=" alt="image.png"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Executors 工具类、3大方法</span>        <span class="token comment">// Executors.newSingleThreadExecutor();// 创建单个线程的线程池</span>        <span class="token comment">// Executors.newFixedThreadPool(5);// 创建一个固定大小的线程池</span>        <span class="token comment">// Executors.newCachedThreadPool();// 创建一个可伸缩的线程池</span>                <span class="token comment">// 单个线程的线程池</span>        <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span>             <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用了线程池之后，使用线程池来创建线程</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 线程池用完，程序结束，关闭线程池</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="QZNm7"></a></p><h4 id="七大参数"><a href="#七大参数" class="headerlink" title="七大参数"></a>七大参数</h4><p> 源码分析</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">ublic <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span> <span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>            <span class="token number">1</span><span class="token punctuation">,</span>             <span class="token number">1</span><span class="token punctuation">,</span>            <span class="token number">0L</span><span class="token punctuation">,</span>             <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>             <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>        <span class="token number">5</span><span class="token punctuation">,</span>         <span class="token number">5</span><span class="token punctuation">,</span>         <span class="token number">0L</span><span class="token punctuation">,</span>         <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>         <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ExecutorService</span> <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>        <span class="token number">0</span><span class="token punctuation">,</span>         <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>         <span class="token number">60L</span><span class="token punctuation">,</span>         <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>         <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// 本质ThreadPoolExecutor（） </span><span class="token keyword">public</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span> <span class="token comment">// 核心线程池大小 </span>                          <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span> <span class="token comment">// 最大核心线程池大小 </span>                          <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span> <span class="token comment">// 超时没有人调用就会释放 </span>                          <span class="token class-name">TimeUnit</span> unit<span class="token punctuation">,</span> <span class="token comment">// 超时单位 </span>                          <span class="token comment">// 阻塞队列 </span>                          <span class="token class-name">BlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Runnable</span><span class="token punctuation">></span></span> workQueue<span class="token punctuation">,</span>                           <span class="token comment">// 线程工厂：创建线程的，一般 不用动</span>                          <span class="token class-name">ThreadFactory</span> threadFactory<span class="token punctuation">,</span>                            <span class="token comment">// 拒绝策略</span>                          <span class="token class-name">RejectedExecutionHandler</span> handle <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span>         <span class="token operator">||</span> maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span>         <span class="token operator">||</span> maximumPoolSize <span class="token operator">&lt;</span> corePoolSize         <span class="token operator">||</span> keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> <span class="token keyword">null</span>         <span class="token operator">||</span> threadFactory <span class="token operator">==</span> <span class="token keyword">null</span>         <span class="token operator">||</span> handler <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span>         <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token class-name">AccessController</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>     <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650528244522-fe23435e-4cf4-42f9-8985-f06e1a7554b2.png##clientId=u82aecd82-c0c1-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u521b4af4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=411&originWidth=681&originalType=url&ratio=1&rotation=0&showTitle=false&size=63350&status=done&style=none&taskId=u2bddd295-dcc8-4b29-b710-3645d874dcb&title=" alt="image.png"></p><hr><p>手动创建一个线程池<br />因为实际开发中工具类<strong>Executors</strong> 不安全，所以需要手动创建线程池，自定义7个参数。<br><a name="pqsrq"></a></p><h4 id="四种拒绝策略"><a href="#四种拒绝策略" class="headerlink" title="四种拒绝策略"></a>四种拒绝策略</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token comment">// Executors 工具类、3大方法</span><span class="token comment">// Executors.newSingleThreadExecutor();// 创建一个单个线程的线程池</span><span class="token comment">// Executors.newFixedThreadPool(5);// 创建一个固定大小的线程池</span><span class="token comment">// Executors.newCachedThreadPool();// 创建一个可伸缩的线程池</span><span class="token comment">/** * 四种拒绝策略： * * new ThreadPoolExecutor.AbortPolicy()  * 银行满了，还有人进来，不处理这个人的，抛出异常 * * new ThreadPoolExecutor.CallerRunsPolicy()  * 哪来的去哪里！比如你爸爸 让你去通知妈妈洗衣服，妈妈拒绝，让你回去通知爸爸洗 * * new ThreadPoolExecutor.DiscardPolicy()  * 队列满了，丢掉任务，不会抛出异常！ * * new ThreadPoolExecutor.DiscardOldestPolicy()  * 队列满了，尝试去和最早的竞争，也不会抛出异常！ */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 自定义线程池！工作 ThreadPoolExecutor</span>        <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">// int corePoolSize, 核心线程池大小(候客区窗口2个)</span>                <span class="token number">5</span><span class="token punctuation">,</span><span class="token comment">// int maximumPoolSize, 最大核心线程池大小(总共5个窗口) </span>                <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">// long keepAliveTime, 超时3秒没有人调用就会释，放关闭窗口 </span>                <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token comment">// TimeUnit unit, 超时单位 秒 </span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 阻塞队列(候客区最多3人)</span>                <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 默认线程工厂</span>            <span class="token comment">// 4种拒绝策略之一：</span>            <span class="token comment">// 队列满了，尝试去和 最早的竞争，也不会抛出异常！</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//队列满了，尝试去和最早的竞争，也不会抛出异常！</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 最大承载：Deque + max</span>            <span class="token comment">// 超过 RejectedExecutionException</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用了线程池之后，使用线程池来创建线程</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 线程池用完，程序结束，关闭线程池</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><a name="JIpzg"></a></p><h4 id="CPU集型和IO密集型"><a href="#CPU集型和IO密集型" class="headerlink" title="CPU集型和IO密集型"></a>CPU集型和IO密集型</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 自定义线程池！工作 ThreadPoolExecutor</span>                <span class="token comment">// 最大线程到底该如何定义</span>        <span class="token comment">// 1、CPU 密集型，几核，就是几，可以保持CPu的效率最高！</span>        <span class="token comment">// 2、IO 密集型 > 判断你程序中十分耗IO的线程，</span>        <span class="token comment">// 比如程序 15个大型任务 io十分占用资源！</span>        <span class="token comment">// IO密集型参数(最大线程数)就设置为大于15即可，一般选择两倍</span>                <span class="token comment">// 获取CPU的核数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 6核</span>                <span class="token class-name">ExecutorService</span> threadPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>            <span class="token number">2</span><span class="token punctuation">,</span><span class="token comment">// int corePoolSize, 核心线程池大小</span>            <span class="token comment">// int maximumPoolSize, 最大核心线程池大小 8核电脑就是8</span>            <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token number">3</span><span class="token punctuation">,</span><span class="token comment">// long keepAliveTime, 超时3秒没有人调用就会释放</span>            <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span><span class="token comment">// TimeUnit unit, 超时单位 秒</span>            <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 阻塞队列(候客区最多3人)</span>            <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment">// 默认线程工厂</span>            <span class="token comment">// 4种拒绝策略之一：</span>            <span class="token comment">// 队列满了，尝试去和 最早的竞争，也不会抛出异常！</span>            <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardOldestPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//队列满了，尝试去和最早的竞争，也不会抛出异常！</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 最大承载：Deque + max</span>            <span class="token comment">// 超过 RejectedExecutionException</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 使用了线程池之后，使用线程池来创建线程</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>                        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" ok"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 线程池用完，程序结束，关闭线程池</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>牛客论坛项目 实现模块(上)</title>
      <link href="/2022/04/20/%E7%89%9B%E5%AE%A2%E8%AE%BA%E5%9D%9B%E9%A1%B9%E7%9B%AE%20%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
      <url>/2022/04/20/%E7%89%9B%E5%AE%A2%E8%AE%BA%E5%9D%9B%E9%A1%B9%E7%9B%AE%20%E5%AE%9E%E7%8E%B0%E6%A8%A1%E5%9D%97%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="1-登录"><a href="#1-登录" class="headerlink" title="1.登录"></a>1.登录</h2><h3 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h3><ol><li>前端传入账号和密码，进入数据库查询user</li><li>需要用一个Login ticket类来记录登录的凭证状态</li><li>先进行空值处理</li><li>再依次验证账号、密码、激活状态</li><li>验证密码过程，也需要加密判断<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 验证密码&#x2F;&#x2F;salt是创建账户时的一个随机字符串       password &#x3D; CommunityUtil.md5(password + user.getSalt());       if (!user.getPassword().equals(password)) &#123;           map.put(&quot;passwordMsg&quot;, &quot;密码不正确!&quot;);           return map;       &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ul><li>然后生成登录凭证<h3 id="表现层"><a href="#表现层" class="headerlink" title="表现层"></a>表现层</h3></li></ul><ol><li>先检验验证码</li><li>检验账号密码，调用业务层接口</li><li>将登陆凭证放入Cookie<pre class="line-numbers language-none"><code class="language-none">if (map.containsKey(&quot;ticket&quot;)) &#123;           Cookie cookie &#x3D; new Cookie(&quot;ticket&quot;, map.get(&quot;ticket&quot;).toString());           cookie.setPath(contextPath);           cookie.setMaxAge(expiredSeconds);           response.addCookie(cookie);           return &quot;redirect:&#x2F;index&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>html里取request的值，可以用${param.username}</li></ol><h2 id="2-显示登录信息"><a href="#2-显示登录信息" class="headerlink" title="2.显示登录信息"></a>2.显示登录信息</h2><ul><li>拦截器示例<ul><li>定义拦截器，实现HandlerInterceptor</li><li>配置拦截器，为它指定拦截、排除的路径</li></ul></li><li>拦截器应用<ul><li>在请求开始时查询登录用户</li><li>在本次请求中持有用户数据</li><li>在模板视图上显示用户数据</li><li>在请求结束时清理用户数据</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1649174722405-2749389a-09d9-4f9a-8e52-681c48e4c284.png##clientId=u55419258-15d6-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=583&id=u17790cd4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=583&originWidth=1180&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59346&status=done&style=none&taskId=u2e58647d-9b65-4602-b11a-c0a1ef8b5a3&title=&width=1180" alt="image.png"></p><p>由于访问是并发访问，所以要把查到的user信息 存在threadlocal里，我们创建一个HostHolder工具类，代替session对象</p><h2 id="3-账号设置"><a href="#3-账号设置" class="headerlink" title="3.账号设置"></a>3.账号设置</h2><ul><li><p>上传文件</p><ul><li>请求：必须是POST请求</li><li>表单：enctype&#x3D;“multipart&#x2F;form-data”</li><li>Spring MVC：通过 MultipartFile 处理上传文件</li></ul></li><li><p>开发步骤</p><ul><li>访问账号设置页面</li><li>上传头像</li><li>获取头像<h2 id="4-检查登录状态"><a href="#4-检查登录状态" class="headerlink" title="4.检查登录状态"></a>4.检查登录状态</h2></li></ul></li><li><p>使用拦截器</p><ul><li>在方法前标注自定义注解</li><li>拦截所有请求，只处理带有该注解的方法</li></ul></li><li><p>自定义注解</p><ul><li>常用的元注解： @Target、@Retention、@Document、@Inherited</li></ul></li><li><p>如何读取注解： Method.getDeclaredAnnotations () Method.getAnnotation (Class annotationClass)</p><h2 id="5-过滤敏感词"><a href="#5-过滤敏感词" class="headerlink" title="5.过滤敏感词"></a>5.过滤敏感词</h2></li><li><p>前缀树</p><ul><li>名称：Trie、字典树、查找树</li><li>特点：查找效率高，消耗内存大</li><li>应用：字符串检索、词频统计、字符串排序等</li></ul></li><li><p>敏感词过滤器</p><ul><li>定义前缀树</li><li>根据敏感词，初始化前缀树</li><li>编写过滤敏感词的方法<h2 id="6-发帖功能"><a href="#6-发帖功能" class="headerlink" title="6.发帖功能"></a>6.发帖功能</h2></li></ul></li><li><p>AJAX</p><ul><li>Asynchronous JavaScript and XML</li><li>异步的JavaScript与XML，不是一门新技术，只是一个新的术语。</li><li>使用AJAX，网页能够将增量更新呈现在页面上，而不需要刷新整个页面。</li><li>虽然X代表XML，但目前JSON的使用比XML更加普遍。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX">https://developer.mozilla.org/zh-CN/docs/Web/Guide/AJAX</a></li></ul></li><li><p>示例</p><ul><li>使用jQuery发送AJAX请求。</li></ul></li><li><p>实践</p><ul><li>采用AJAX请求，实现发布帖子的功能。<h2 id="7-Spring事务管理"><a href="#7-Spring事务管理" class="headerlink" title="7.Spring事务管理"></a>7.Spring事务管理</h2></li></ul></li><li><p>声明式事务</p><ul><li>通过XML配置，声明某方法的事务特征。</li><li>通过注解，声明某方法的事务特征。</li></ul></li><li><p>编程式事务</p><ul><li>通过 TransactionTemplate 管理事务，并通过它执行数据库的操作。</li></ul></li></ul><p><strong>在项目中的应用：评论帖子</strong></p><h2 id="8-显示评论"><a href="#8-显示评论" class="headerlink" title="8.显示评论"></a>8.显示评论</h2><ul><li><p>数据层</p><ul><li>根据实体查询一页评论数据。</li><li>根据实体查询评论的数量。</li></ul></li><li><p>业务层</p><ul><li>处理查询评论的业务。</li><li>处理查询评论数量的业务。</li></ul></li><li><p>表现层</p><ul><li>显示帖子详情数据时，同时显示该帖子所有的评论数据。<h2 id="9-添加评论"><a href="#9-添加评论" class="headerlink" title="9.添加评论"></a>9.添加评论</h2></li></ul></li><li><p>数据层</p><ul><li>增加评论数据。</li><li>修改帖子的评论数量。</li></ul></li><li><p>业务层</p><ul><li>处理添加评论的业务：先增加评论、再更新帖子的评论数量。</li></ul></li><li><p>表现层</p><ul><li>处理添加评论数据的请求。</li><li>设置添加评论的表单。<h2 id="10-私信列表"><a href="#10-私信列表" class="headerlink" title="10.私信列表"></a>10.私信列表</h2></li></ul></li><li><p>私信列表</p><ul><li>查询当前用户的会话列表，每个会话只显示一条最新的私信。</li><li>支持分页显示。</li></ul></li><li><p>私信详情</p><ul><li>查询某个会话所包含的私信。</li><li>支持分页显示。<h2 id="11-发送私信"><a href="#11-发送私信" class="headerlink" title="11.发送私信"></a>11.发送私信</h2></li></ul></li><li><p>发送私信</p><ul><li>采用异步的方式发送私信。</li><li>发送成功后刷新私信列表。</li></ul></li><li><p>设置已读</p><ul><li>访问私信详情时，将显示的私信设置为已读状态。<h2 id="12-统一异常处理"><a href="#12-统一异常处理" class="headerlink" title="12.统一异常处理"></a>12.统一异常处理</h2></li></ul></li><li><p>@ControllerAdvice</p><ul><li>用于修饰类，表示该类是Controller的全局配置类。</li><li>在此类中，可以对Controller进行如下三种全局配置：异常处理方案、绑定数据方案、绑定参数方案。</li></ul></li><li><p>@ExceptionHandler</p><ul><li>用于修饰方法，该方法会在Controller出现异常后被调用，用于处理捕获到的异常。</li></ul></li><li><p>@ModelAttribute</p><ul><li>用于修饰方法，该方法会在Controller方法执行前被调用，用于为Model对象绑定参数。</li></ul></li><li><p>@DataBinder</p><ul><li>用于修饰方法，该方法会在Controller方法执行前被调用，用于绑定参数的转换器。<h2 id="13-同意记录日志"><a href="#13-同意记录日志" class="headerlink" title="13.同意记录日志"></a>13.同意记录日志</h2></li></ul></li></ul><p><strong>需求</strong>：</p><ul><li>帖子模块</li><li>评论模块</li><li>消息模块</li></ul><p><strong>AOP的概念</strong>：</p><ul><li>Aspect Oriented Programing，即面向方面（切面）编程。</li><li>AOP是一种编程思想，是对OOP的补充，可以进一步提高编程的效率。</li></ul><p><strong>AOP的实现</strong></p><ul><li>AspectJ<ul><li>AspectJ是语言级的实现，它扩展了Java语言，定义了AOP语法。</li><li>AspectJ在编译期织入代码，它有一个专门的编译器，用来生成遵守Java字节码规范的class文件。</li></ul></li><li>Spring AOP<ul><li>Spring AOP使用纯Java实现，它不需要专门的编译过程，也不需要特殊的类装载器。</li><li>Spring AOP在运行时通过代理的方式织入代码，只支持方法类型的连接点。</li><li>Spring支持对AspectJ的集成。</li></ul></li></ul><p><strong>Spring AOP</strong></p><ul><li><p>JDK动态代理</p><ul><li>Java提供的动态代理技术，可以在运行时创建接口的代理实例。</li><li>Spring AOP默认采用此种方式，在接口的代理实例中织入代码。</li></ul></li><li><p>CGLib动态代理</p><ul><li>采用底层的字节码技术，在运行时创建子类代理实例。</li><li>当目标对象不存在接口时，Spring AOP会采用此种方式，在子类实例中织入代码。<h2 id="14-Spring整合redis"><a href="#14-Spring整合redis" class="headerlink" title="14. Spring整合redis"></a>14. Spring整合redis</h2></li></ul></li><li><p>引入依赖</p><ul><li>spring-boot-starter-data-redis</li></ul></li><li><p>配置Redis</p><ul><li>配置数据库参数</li><li>编写配置类，构造RedisTemplate</li></ul></li><li><p>访问Redis</p><ul><li>redisTemplate.opsForValue()</li><li>redisTemplate.opsForHash()</li><li>redisTemplate.opsForList()</li><li>redisTemplate.opsForSet()</li><li>redisTemplate.opsForZSet()<h2 id="15-Redis实现点赞功能"><a href="#15-Redis实现点赞功能" class="headerlink" title="15. Redis实现点赞功能"></a>15. Redis实现点赞功能</h2></li></ul></li><li><p>点赞</p><ul><li>支持对帖子、评论点赞。</li><li>第1次点赞，第2次取消点赞。</li></ul></li><li><p>首页点赞数量</p><ul><li>统计帖子的点赞数量。</li></ul></li><li><p>详情页点赞数量</p><ul><li>统计点赞数量。</li><li>显示点赞状态。</li></ul></li></ul><p>点赞更新频率较高且需要实时更新，存在MySQL里会被高频读写，IO开销大，读内存速度快</p><p>先写个工具类，返回拼接过后的rediskey<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650378409011-31f430f2-62a3-4dc2-b279-fe160edc67f5.png##clientId=u1f8e6e56-996c-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=258&id=ua8ae14fd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=258&originWidth=741&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33074&status=done&style=none&taskId=ud54a58ae-93e2-4f81-bded-67275db5d33&title=&width=741" alt="image.png"><br>直接在业务层进行开发</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>nowcoder<span class="token punctuation">.</span>community<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">RedisKeyUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">RedisTemplate</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Service</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LikeService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment">//点赞</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">like</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> entityType<span class="token punctuation">,</span> <span class="token keyword">int</span> entityId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> entityLikeKey <span class="token operator">=</span> <span class="token class-name">RedisKeyUtil</span><span class="token punctuation">.</span><span class="token function">getEntityLikeKey</span><span class="token punctuation">(</span>entityType<span class="token punctuation">,</span>entityId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isMember <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>entityLikeKey<span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先判断该用户是否点过赞</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isMember<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>entityLikeKey<span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entityLikeKey<span class="token punctuation">,</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写查看点赞数量以及个人点赞状态</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//查询某实体点赞的数量</span>  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">findEntityLikeCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> entityType<span class="token punctuation">,</span> <span class="token keyword">int</span> entityId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> entityLikeKey <span class="token operator">=</span> <span class="token class-name">RedisKeyUtil</span><span class="token punctuation">.</span><span class="token function">getEntityLikeKey</span><span class="token punctuation">(</span>entityType<span class="token punctuation">,</span>entityId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>entityLikeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//查询某人对某实体的点赞状态</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findEntityLikeStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span><span class="token keyword">int</span> entityType<span class="token punctuation">,</span> <span class="token keyword">int</span> entityId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> entityLikeKey <span class="token operator">=</span> <span class="token class-name">RedisKeyUtil</span><span class="token punctuation">.</span><span class="token function">getEntityLikeKey</span><span class="token punctuation">(</span>entityType<span class="token punctuation">,</span>entityId<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>entityLikeKey<span class="token punctuation">,</span>userId<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>处理表现层</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LikeController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">LikeService</span> likeService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">HostHolder</span> hostHolder<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/like"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> <span class="token class-name">RequestMethod</span><span class="token punctuation">.</span>POST<span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">like</span><span class="token punctuation">(</span><span class="token keyword">int</span> entityType <span class="token punctuation">,</span><span class="token keyword">int</span> entityId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> hostHolder<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//实现点赞</span>        likeService<span class="token punctuation">.</span><span class="token function">like</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>entityType<span class="token punctuation">,</span>entityId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//数量</span>        <span class="token keyword">long</span> likeCount <span class="token operator">=</span> likeService<span class="token punctuation">.</span><span class="token function">findEntityLikeCount</span><span class="token punctuation">(</span>entityType<span class="token punctuation">,</span>entityId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//状态</span>        <span class="token keyword">int</span> status <span class="token operator">=</span> likeService<span class="token punctuation">.</span><span class="token function">findEntityLikeStatus</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>entityType<span class="token punctuation">,</span>entityId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//用map封装，最后转换成Json发送给给前端页面</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"likeCount"</span><span class="token punctuation">,</span>likeCount<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"likeStatus"</span><span class="token punctuation">,</span>status<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">CommunityUtil</span><span class="token punctuation">.</span><span class="token function">getJSONString</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h4 id="实现某个用户的赞"><a href="#实现某个用户的赞" class="headerlink" title="实现某个用户的赞"></a>实现某个用户的赞</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> SPLIT <span class="token operator">=</span> <span class="token string">":"</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PREFIX_ENTITY_LIKE <span class="token operator">=</span> <span class="token string">"like:entity"</span><span class="token punctuation">;</span>  <span class="token keyword">private</span>  <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> PREFIX_USER_LIKE <span class="token operator">=</span> <span class="token string">"like:user"</span><span class="token punctuation">;</span>  <span class="token comment">//某个实体的赞</span>  <span class="token comment">// like:entity:entitytype:entityId  ->set (userid)      这样可以统计赞的数量和赞的用户</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getEntityLikeKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> entityType<span class="token punctuation">,</span><span class="token keyword">int</span> entityId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> PREFIX_ENTITY_LIKE <span class="token operator">+</span> SPLIT <span class="token operator">+</span> entityType<span class="token operator">+</span> SPLIT <span class="token operator">+</span> entityId<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//某个用户的赞</span>  <span class="token comment">//like:user:userId -> int</span>  <span class="token keyword">public</span> <span class="token keyword">static</span>  <span class="token class-name">String</span> <span class="token function">getUserLikeKey</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> PREFIX_USER_LIKE <span class="token operator">+</span> SPLIT <span class="token operator">+</span> userId <span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>service层重构，利用事务编写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">like</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">,</span> <span class="token keyword">int</span> entityType<span class="token punctuation">,</span> <span class="token keyword">int</span> entityId<span class="token punctuation">,</span> <span class="token keyword">int</span> entityUserId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">RedisOperations</span> operations<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">DataAccessException</span> <span class="token punctuation">&#123;</span>               <span class="token class-name">String</span> entityLikeKey <span class="token operator">=</span> <span class="token class-name">RedisKeyUtil</span><span class="token punctuation">.</span><span class="token function">getEntityLikeKey</span><span class="token punctuation">(</span>entityType<span class="token punctuation">,</span> entityId<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token class-name">String</span> userLikeKey <span class="token operator">=</span> <span class="token class-name">RedisKeyUtil</span><span class="token punctuation">.</span><span class="token function">getUserLikeKey</span><span class="token punctuation">(</span>entityUserId<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">boolean</span> isMember <span class="token operator">=</span> operations<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>entityLikeKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>               operations<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">if</span> <span class="token punctuation">(</span>isMember<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   operations<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>entityLikeKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                   operations<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decrement</span><span class="token punctuation">(</span>userLikeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                   operations<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>entityLikeKey<span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>                   operations<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>userLikeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">return</span> operations<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再写一个查询某个用户获得的赞的数量</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 查询某个用户获得的赞</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findUserLikeCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> userId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> userLikeKey <span class="token operator">=</span> <span class="token class-name">RedisKeyUtil</span><span class="token punctuation">.</span><span class="token function">getUserLikeKey</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userLikeKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> count <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> count<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis入门学习</title>
      <link href="/2022/04/18/Redis%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/04/18/Redis%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h2 id="1-基础知识"><a href="#1-基础知识" class="headerlink" title="1.基础知识"></a>1.基础知识</h2><ul><li>Redis的<strong>端口号</strong>为6379</li><li>Redis总共拥有16个数据库，默认使用第0个</li><li>keys *命令 查看所有的key</li><li>flushdb 清除当前数据库</li><li>Redis是<strong>单线程</strong>的（速度快），基于内存操作（所以瓶颈为机器的内存和网络带宽）</li></ul><p>核心：redis将所有数据放在内存中，所以用单线程操作效率最高，而多线程牵扯到cpu的上下文切换（耗时）。<br>xshell连接redis,<strong>在 &#x2F;usr&#x2F;local&#x2F;bin 下</strong></p><pre class="line-numbers language-none"><code class="language-none">[root@VM-4-15-centos bin]## redis-server sjwconfig&#x2F;redis.conf[root@VM-4-15-centos bin]## redis-cli -p 6379127.0.0.1:6379&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="2-五大数据类型"><a href="#2-五大数据类型" class="headerlink" title="2.五大数据类型"></a>2.五大数据类型</h2><h4 id="2-1-String"><a href="#2-1-String" class="headerlink" title="2.1 String"></a>2.1 String</h4><ul><li>append key value 在字符串后面追加value，返回数字，如果key不存在，就相当于set key</li><li>strlen key 返回key的值的字符串长度</li><li>incr key 给这个key的值+1。如果这个key不存在，则相当于set key 1.如果这个key的值不是一个数字，则返回 ERR value is not an integer or out of range。value不是一个数字或超出范围，范围是多大我也不知道，应该是integer的取值范围2147483648。</li><li>decr key 给这个key减一</li><li>incrby key 10 给这个key设置每次增加10，设置步长，指定增量</li><li>decrby key 5 给这个key设置每次自减5.</li><li>getrange key 0 3 获取key对应字符串的部分，相当于java的substring，如果是getranger key 0 -1 则表示获取key的所有&#x3D;GET KEY，而不是截取的部分</li><li>setrange key 2 xx 将字符串中下标为2的值替换为xx，例如set key1 abcde setrange key1 2 xx get key1返回abxxcd。相当于java的replace</li><li>setex key second value 表示设置后多少秒过期，seconds表示过期时间。ex就是expire</li><li>setnx key value 表示如果这个key不存在才设置，如果存在则不设置。nx就是 not exist</li><li>mset k1 v1 k2 v2 k3 v3 … 表示同时设置多个键值对</li><li>mget k1 k2 k3 同时获取多个</li><li>msetnx k1 v1 k2 v2 k3 v3 k4 v4.. 如果不存在则设置，如果key有一个存在的，则所有的都设置不成功。这是一个原子性的操作，<strong>redis的事务是不保证原子性操作的，但是msetnx是保证原子性操作的</strong>。</li><li>getset key value 先get 再set，当key不存在时，返回null 并设置这个key和value，当key存在时，返回key的值并用value覆盖之前的value</li></ul><p><strong>string类型的使用场景</strong>，value除了可以是字符串还可以是数字，因此可以用到以下场景：</p><ul><li><p>计数器：比如浏览量、粉丝数等等，当该对象被浏览了之后，可以使用incr articleid title；或者粉丝数 incr userid fans 或decr</p><h4 id="2-2-List"><a href="#2-2-List" class="headerlink" title="2.2 List"></a>2.2 List</h4><p>在redis中可以将List作为一个栈、队列、阻塞队列来实现。<br>所有的命令都是用L开头的,<strong>不区分大小写命令</strong></p></li><li><p>Lpush list  1 2 3 给list左边添加一个或多个元素</p></li><li><p>Rpush list  v1 v2 v3… 给list右边添加一个或多个元素</p></li><li><p>Lpop list 从列表的左边弹出一个元素</p></li><li><p>Rpop list 从列表的右边弹出一个元素，弹出后元素内容-1</p></li><li><p>Lindex list 0 获取list中下标为0的元素</p></li><li><p>Llen list 获取list长度</p></li><li><p>Lrem list count value表示移除list中count个value元素。</p></li><li><p>Ltrim list start stop 表示根据下标截取队列</p></li><li><p>rpoplpush list1 list2 将list1中最后一个元素移除，并将其放入list2中</p></li><li><p>lset 将列表中指定下标的值替换为另一个值，更新操作，如果列表不存在或下标不存在会报错</p></li><li><p>Linsert list befor&#x2F;after value newvalue 往list中的value的before或after插入一个newvalue处插入一个值。</p></li></ul><p><strong>Lpush Rpop 左边进右边出，这是一个队列；Lpush Lpop 左边进左边出，这是一个栈</strong></p><h4 id="2-3-Set"><a href="#2-3-Set" class="headerlink" title="2.3 Set"></a>2.3 Set</h4><p><strong>set不能重复(无序)</strong></p><ul><li>sadd set v1 v2 v3…. 往set集合中添加一个或多个元素，重复元素只能添加进一个</li><li>smembers set 获取所有元素</li><li>sismember set value 判断value是否存在</li><li>scard set 获取set中元素的个数</li><li>srem set value 将value移除set集合</li><li>srandmember set count 随机返回count个数的元素，count默认1</li><li>spop set count 从set中随机移除一个或count个元素</li><li>smove set newset member将set中的指定元素移动到newset中</li></ul><p>应用场景：<br>微博、b站 共同关注（交集）</p><ul><li><p>sdiff set1 set2 差集</p></li><li><p>sinter set1 set2交集 共同关注就可以这么实现</p></li><li><p>sunion set1 set2并集</p><h4 id="2-4-Hash"><a href="#2-4-Hash" class="headerlink" title="2.4 Hash"></a>2.4 Hash</h4></li><li><p>hset hash key value key1 value1 … 与string类似，命令以H开头，只不过值是k-v</p></li><li><p>hget hash key1 key2…</p></li><li><p>hmset hash key value key1 value1 … 多个操作</p></li><li><p>hmget hash key1 key2…</p></li><li><p>hgetall hash 获取所有的键值对</p></li><li><p>hdel hash key 删除指定的key的字段，对应的value也就没有了</p></li><li><p>hlen hash获取这个hash中有多少个键值对</p></li><li><p>hexists hsah key判断这个key是否存在</p></li><li><p>hkeys hash 获取所有key</p></li><li><p>hvals hash 获取所有value</p></li><li><p>hincrby hash key 1自增</p></li><li><p>hdecrby hash key 1自减</p></li><li><p>hsetnx hash key 如果不存在可以设置，如果存在，则不能设置<br>保存变更的数据，可以将一个用户变形为hashset hash user:id:name zhangsan，因此hash更适合存储对象，而string比较适合存储字符串</p><h4 id="2-5-Zset-有序集合"><a href="#2-5-Zset-有序集合" class="headerlink" title="2.5 Zset(有序集合)"></a>2.5 Zset(有序集合)</h4></li><li><p>zadd key 序号 value</p></li><li><p>zrange zset 0 -1</p></li><li><p>zrangebyscore key -inf +inf</p></li><li><p>zrem key member</p></li><li><p>zcard key</p></li><li><p>zcount  key start stop  获取指定区间的成员数量</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2></li></ul><h2 id="3-三种特殊数据类型"><a href="#3-三种特殊数据类型" class="headerlink" title="3.三种特殊数据类型"></a>3.三种特殊数据类型</h2><h4 id="3-1-geospatial-地理位置"><a href="#3-1-geospatial-地理位置" class="headerlink" title="3.1 geospatial 地理位置"></a>3.1 geospatial 地理位置</h4><p>朋友的定位，附近的 人，打车距离，比如两地之间的距离等等<br>共六个命令</p><ul><li>geoadd key 维度 经度 名称 添加地理位置。南北极无法添加，一般会下载城市地理数据，使用java程序一次性导入，例子GEOADD Sicily 13.361389 38.115556 “Palermo” 15.087269 37.502669 “Catania”。经度和维度的范围超出会报错</li><li>geopos获取指定的城市的经度和维度</li><li>geodist<br>m 表示单位为米。<br>km 表示单位为千米。<br>mi 表示单位为英里。<br>ft 表示单位为英尺。<br>如果用户没有显式地指定单位参数， 那么 GEODIST 默认使用米作为单位。</li><li>georadius 如图，显示110 30 这个经纬度周围500km的城市<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650024795893-c1eb5b8a-cd59-4089-9a9d-ccad3d160c55.png##clientId=u77687043-8319-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u7d4449a7&margin=%5Bobject%20Object%5D&name=image.png&originHeight=79&originWidth=493&originalType=url&ratio=1&rotation=0&showTitle=false&size=31405&status=done&style=none&taskId=ub42a10a2-820b-4bc2-9bde-468be7c474e&title=" alt="image.png">附近的人的原理就是这个，当我们将所有用户的位置信息加入redis后，某个用户查看周围范围（可指定）多少人（可指定）</li><li>georadiusbymember找出位于指定范围内的元素，中心点是由给定的位置元素决定</li><li>geohash 了解一下 返回一个或多个位置元素的 Geohash 表示</li></ul><p><strong>geo的底层实现是基于zset，因此我们可以使用zset的命令来操作geo的元素</strong></p><h4 id="3-2-Hyperloglog-基数统计"><a href="#3-2-Hyperloglog-基数统计" class="headerlink" title="3.2 Hyperloglog 基数统计"></a>3.2 Hyperloglog 基数统计</h4><p>简介：<br>    Redis2.5.9版本更新了Hyperloglog数据结构<br>    应用场景：<strong>统计网站访问量</strong>，同一个人多次访问也只计做一次<br>传统的做法：使用set保存用户id，计算set的size，<strong>这个方法的缺点就是耗费内存</strong>，并且我们的主要目的是计算访问量，而不是保存id<br>使用Hyperloglog：<strong>内存占用小</strong>，2^64的数据仅占用12KB；错误率0.81%很低，基本上可以忽略不计</p><pre><code> 命令如下图：</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650026278568-6fe6dc46-2cc8-4c11-a48b-70ec3eff47ad.png##clientId=u77687043-8319-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u91010860&margin=%5Bobject%20Object%5D&name=image.png&originHeight=215&originWidth=593&originalType=url&ratio=1&rotation=0&showTitle=false&size=103555&status=done&style=none&taskId=u437f4dfb-33ae-44f5-87d4-429a395fba0&title=" alt="image.png"></p><h4 id="3-3-Bitmaps"><a href="#3-3-Bitmaps" class="headerlink" title="3.3 Bitmaps"></a>3.3 Bitmaps</h4><p>######## 使用场景：<br>统计用户信息，活跃、不活跃，登录、未登录，打卡，两种状态的都可以使用BitMap<br>######## 简介<br>Bitmap 位图，使用二进制来进行记录，只有0和1两个状态的都可以这么做</p><h2 id="4-redis事务操作"><a href="#4-redis事务操作" class="headerlink" title="4.redis事务操作"></a>4.redis事务操作</h2><p>Redis的事物中<strong>不保证原子性</strong>，但是Redis的<strong>单条命令是保证原子性</strong>的</p><hr><p>Redis事物的本质：<br>Redis会将一组命令保存在一个队列中，然后顺序执行，在事物中命令都会被序列化，并且是一次性全部执行完毕，不允许被打断。<br>redis的事物：</p><ul><li>开启事物：multi</li><li>命令入队：</li><li>执行事物：execu</li></ul><p> -放弃事物：discard<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650111442840-7d09e438-4e16-478b-b4e5-3c6c4262c705.png##clientId=u22d88724-ae18-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=398&id=u8d20da64&margin=%5Bobject%20Object%5D&name=image.png&originHeight=422&originWidth=401&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8979&status=done&style=none&taskId=u3b238bcf-1dc0-4495-9575-2b1e07d6cfa&title=&width=378" alt="image.png"><br>异常：</p><ul><li>编译时异常：命令错误，在程序启动时就会报错，所有命令都不执行</li><li>运行时异常：抛出异常，其他命令执行</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650111749757-56cdd771-3d54-4854-aeec-93bcd768acb2.png##clientId=u22d88724-ae18-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u490edf84&margin=%5Bobject%20Object%5D&name=image.png&originHeight=315&originWidth=569&originalType=url&ratio=1&rotation=0&showTitle=false&size=109673&status=done&style=none&taskId=uf7087ec5-a5e1-4543-a963-438953bcf8b&title=" alt="image.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650111783904-f47b0a1f-e0a0-47b7-b416-9788f101054c.png##clientId=u22d88724-ae18-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub2e275f6&margin=%5Bobject%20Object%5D&name=image.png&originHeight=380&originWidth=709&originalType=url&ratio=1&rotation=0&showTitle=false&size=102322&status=done&style=none&taskId=uc4931ef8-8bd5-4f69-bdcd-12dfc6fcc3a&title=" alt="image.png"></p><h2 id="5-Redis锁："><a href="#5-Redis锁：" class="headerlink" title="5. Redis锁："></a>5. Redis锁：</h2><p>锁：</p><ul><li>悲观锁：认为任何时候都有可能出问题，因此在任何时候都要加锁</li><li>乐观锁：认为 一般不会出问题，所以不上锁。只有在特定的时候才上</li><li>使用watch实现乐观锁<br>举例：如下图，当我们有一个存款为100的时候，开启监视watch命令，然后开启事物，执行消费二十，然后给支出项增加二十，或者余额减去二十，然后提交事物，执行命令，这个时候是正常执行的没有问题。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650112193172-e538c453-dfdc-4fdb-9d18-f436a552af5b.png##clientId=u22d88724-ae18-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=320&id=uec6afa98&margin=%5Bobject%20Object%5D&name=image.png&originHeight=320&originWidth=635&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11041&status=done&style=none&taskId=ue8921f2d-27f9-4174-92b8-9e2120fb097&title=&width=635" alt="image.png"><br>当出现如下情况的时候，首先监视money，这个时候它的值是100，然后开启事物，消费10块钱，支出项增加10，然后在exec命令执行之前，另一个线程中修改了money的值，这个时候exec执行的时候发现money的值已经改变了，就会返回一个null，表示事物执行失败<br>    <img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650112230147-a24271ab-34cc-402e-a256-d604e631ec59.png##clientId=u22d88724-ae18-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u9018c233&margin=%5Bobject%20Object%5D&name=image.png&originHeight=187&originWidth=578&originalType=url&ratio=1&rotation=0&showTitle=false&size=56825&status=done&style=none&taskId=uf300b9b3-40cc-454a-9d4f-a7955371c76&title=" alt="image.png"><br>那么如何解决这个问题呢？首先使用UNwatch命令解锁，将刚才出异常的锁释放掉，然后重新给 money加锁，重新开启事物，加入命令到队列，再exec，这个时候获取到的就是最新的money。<img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650112230178-f7bdc262-f33b-465c-b9d7-d41745d7b80c.png##clientId=u22d88724-ae18-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uf51724d8&margin=%5Bobject%20Object%5D&name=image.png&originHeight=211&originWidth=565&originalType=url&ratio=1&rotation=0&showTitle=false&size=101817&status=done&style=none&taskId=uc41fb9ce-938a-4fb3-995e-16bb7b6cd8b&title=" alt="image.png"></p><h2 id="6-Jedis"><a href="#6-Jedis" class="headerlink" title="6. Jedis"></a>6. Jedis</h2><p>什么是jedis？<br>    jedis是Redis官方推荐的java连接开发工具，使用java操作redis中间件，在springboot中使用redisTemplate操作，但是还是要对jedis十分了解才行。</p><h4 id="6-1导入maven依赖"><a href="#6-1导入maven依赖" class="headerlink" title="6.1导入maven依赖"></a>6.1导入maven依赖</h4><pre class="line-numbers language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;&lt;project xmlns&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0&quot;xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;maven.apache.org&#x2F;POM&#x2F;4.0.0 http:&#x2F;&#x2F;maven.apache.org&#x2F;xsd&#x2F;maven-4.0.0.xsd&quot;&gt;&lt;modelVersion&gt;4.0.0&lt;&#x2F;modelVersion&gt;&lt;groupId&gt;org.example&lt;&#x2F;groupId&gt;&lt;artifactId&gt;RedisDemo&lt;&#x2F;artifactId&gt;&lt;version&gt;1.0-SNAPSHOT&lt;&#x2F;version&gt;&lt;dependencies&gt;&lt;dependency&gt;&lt;groupId&gt;redis.clients&lt;&#x2F;groupId&gt;&lt;artifactId&gt;jedis&lt;&#x2F;artifactId&gt;&lt;version&gt;2.9.0&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;dependency&gt;&lt;groupId&gt;com.alibaba&lt;&#x2F;groupId&gt;&lt;artifactId&gt;fastjson&lt;&#x2F;artifactId&gt;&lt;version&gt;1.2.74&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;&lt;&#x2F;dependencies&gt;&lt;properties&gt;&lt;maven.compiler.source&gt;11&lt;&#x2F;maven.compiler.source&gt;&lt;maven.compiler.target&gt;11&lt;&#x2F;maven.compiler.target&gt;&lt;&#x2F;properties&gt;&lt;&#x2F;project&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-编码测试"><a href="#6-2-编码测试" class="headerlink" title="6.2 编码测试"></a>6.2 编码测试</h4><ul><li>连接数据库</li><li>操作命令</li><li>断开连接</li></ul><p>测试连接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestPing</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//new Jedis 对象</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//jedis 的所有命令就是之前学习的命令</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-3-事务"><a href="#6-3-事务" class="headerlink" title="6.3 事务"></a>6.3 事务</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>sjw</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSONObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">netscape<span class="token punctuation">.</span>javascript<span class="token punctuation">.</span></span><span class="token class-name">JSObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Jedis</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">redis<span class="token punctuation">.</span>clients<span class="token punctuation">.</span>jedis<span class="token punctuation">.</span></span><span class="token class-name">Transaction</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestTX</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">JSONObject</span> jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"sjw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jedis<span class="token punctuation">.</span><span class="token function">flushDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//开启事务</span>        <span class="token class-name">Transaction</span> multi <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> result <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user2"</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//代码抛出异常，执行失败</span>            multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//放弃事务</span>            multi<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-SpringBoot-集成-Redis"><a href="#7-SpringBoot-集成-Redis" class="headerlink" title="7. SpringBoot 集成 Redis"></a>7. SpringBoot 集成 Redis</h2><p>在springboot2.x之后，原来使用的jedis被替换为lettuce，为什么替换呢？<br>redis：采用直连的方式，多线程操作不安全，如果想要避免不安全，就要使用<strong>jedis pool连接池</strong>，类似<strong>BIO</strong>模型 ，是阻塞的。<br>lettuce：采用netty，实例可以在多个线程中共享，不存在线程不安全情况，更像<strong>NIO</strong>模型</p><p><strong>步骤：</strong></p><ul><li>导入依赖<br>在maven仓库或者spring官网都可以找到整个redis的依赖，加入启动器spring-boot-starter-data-redis，这个启动器底层是使用的spring-data-redis来连接redis的，springData也是spring的一个大型项目，包括jpa、jdbc、MongoDB、redis都是使用springdata进行连接。</li><li>配置连接<br>我们知道在springboot中有自动配置类和对应的properties类，这两个类帮助springBoot快速构建组件，这里我们说一下springBoot整合Redis的源码分析</li></ul><p>操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">RedisSpringbootApplicationTests</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> <span class="token class-name">RedisTemplate</span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//springboot 中opsForxxx即表示操作某个类型，如下：</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作string类型</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作List类型</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作map类型</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//操作set类型</span>        <span class="token comment">//还有一些常用的操作，可以直接用redisTemplate进行</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//开启事务</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行事务</span><span class="token comment">//        redisTemplate.watch();//开启乐观锁</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭事务</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-redis配置详解"><a href="#8-redis配置详解" class="headerlink" title="8. redis配置详解"></a>8. redis配置详解</h2><p>redis的配置文件redis.conf，这个文件中使用###################################### 模块名############################ 这种方式将各个配置项分割开来，具体如下：</p><ul><li>单位配置：不知道这玩意是干啥的，一般不动。配置大小写不敏感</li><li>INCLUDES，包含，意思就是可以把其他配置文件包含进来组成一个配置文件，这在你有标准配置模板但是每个redis服务器又需要个性设置的时候很有用。并且include 配置最好放在配置文件的最后一行？<ul><li><h4 id="include-path-to-local-conf"><a href="#include-path-to-local-conf" class="headerlink" title="include .\path\to\local.conf"></a>include .\path\to\local.conf</h4></li><li><h4 id="include-c-path-to-other-conf"><a href="#include-c-path-to-other-conf" class="headerlink" title="include c:\path\to\other.conf"></a>include c:\path\to\other.conf</h4></li></ul></li><li>NETWORK 网络配置<ul><li>bind 127.0.0.1 绑定的ip</li><li>protected-mode yes 是否保护模式</li><li>port 6379 端口设置</li><li>timeout 0</li></ul></li><li>GENERAL 通用<ul><li>loglevel notice 日志级别<ul><li>debug (a lot of information, useful for development&#x2F;testing) 开发或测试时用</li><li>verbose (many rarely useful info, but not a mess like the debug level) 一些常用的信息</li><li>notice (moderately verbose, what you want in production probably) 生产模式使用</li><li>warning (only very important &#x2F; critical messages are logged) 只打印一些重要的 信息</li></ul></li><li>daemonize no 是否设置为守护进程，Windows中不支持该配置。默认yes</li><li>supervised no</li><li>pidfile &#x2F;var&#x2F;run&#x2F;redis.pid 如果以守护进程的方式运行，就需要指定这个pid文件，不知道有什么用</li><li>logfile “” 日志文件保存路径</li><li>databases 16 默认一共16个数据库</li><li>always-show-logo yes 启动时是否显示logo</li></ul></li><li>SNAPSHOTTING 快照，快照分rdb和aof<ul><li>save “” 持久化操作的策略<ul><li>save 900 1 如果900秒内有一次key进行了更新，则持久化一次</li><li>save 300 10 如果300秒内有10 key进行了更新，则持久化一次</li><li>save 60 10000 如果60秒 内有至少10000个key进行了更新，则持久化一次。一般情况我们不会使用这几种方式，一般都是</li></ul></li><li>stop-writes-on-bgsave-error yes 如果持久化过程出现错误，是否还要继续</li><li>rdbcompression yes 是否压缩rdb文件，需要消耗一些CPU资源</li><li>rdbchecksum yes 保存rdb文件的时候，进行错误的检查校验</li><li>dir .&#x2F; rdb文件保存的目录，默认当前目录下</li><li>dbfilename dump.rdb rdb文件的名字，默认dump</li></ul></li><li>REPLICATION 主从复制</li><li>SECURITY 安全 <strong>默认没有密码</strong> vm_redis:0&gt;config get requirepass  &#x2F;&#x2F;获取密码   1)  “requirepass”  2)  “” vm_redis:0&gt;config set requirepass 123456  &#x2F;&#x2F;设置密码 “OK” vm_redis:0&gt;config get requirepass   1)  “requirepass”  2)  “123456” vm_redis:0&gt;ping “PONG” vm_redis:0&gt;auth 123456  &#x2F;&#x2F;使用密码登录 “OK” 123456789101112<ul><li>requirepass foobared 设置密码，也可以使用如下命令</li></ul></li><li>CLIENTS 客户端配置<ul><li>maxclients 10000 最大允许一万个客户端连接</li><li>**maxmemory **配置redis的最大内存容量</li><li>maxmemory-policy noeviction 内存达到上限后的回收策略从已经设置了过期时间的key中去选择<ul><li>noeviction： 默认的策略，即当内存使用达到阈值的时候，所有引起申请内存的命令都会报错；</li><li><strong>allkeys-lru</strong>：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰 。<br>适用场景： 如果我们的应用对缓存的访问都是相对热点数据，就可以选择这个策略；</li><li>allkeys-random：随机移除某个key。<br>适合的场景：如果我们的应用对于缓存key的访问概率相等，则可以使用这个策略。</li><li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰。</li><li>volatile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰。</li><li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰；适合场景：这种策略使我们可以向Redis提示哪些key更适合被淘汰，可以自己控制 。</li></ul></li></ul></li><li>APPEND ONLY 模式 aof配置（了解，大部分情况下rdb已经足够使用，aof是对rdb的一个补充，并且性能不高，因此使用少）<ul><li>appendonly no** 默认不开启aof模式**，如果我们要启用aof，一般情况下只需要将该项配置改为yes即可</li><li>appendfilename “appendonly.aof” aof持久化文件的名字</li><li>appendfsync<ul><li>appendfsync always 每次修改都会同步，消耗性能</li><li>appendfsync everysec 每秒执行一次同步sync，可能会丢失这一秒的数据</li><li>appendfsync no 不执行同步，速度快</li></ul></li><li>no-appendfsync-on-rewrite no 保持默认即可</li><li>xxx-rewrite-xxx 重写配置（了解，一般不做修改）<ul><li>例如64M，就是说aof会一直将写操作命令追加进aof文件中，如果文件大小超过了这个64m，就会生成一个新的 文件<h2 id="9-Redis持久化"><a href="#9-Redis持久化" class="headerlink" title="9. Redis持久化"></a>9. Redis持久化</h2><h4 id="9-1-RDB"><a href="#9-1-RDB" class="headerlink" title="9.1 RDB"></a>9.1 RDB</h4>redis 是内存数据库，断电及失，因此需要持久化，默认使用RDB，一般情况下我们无需修改RDB配置，即可使用。<br>Redis会单独创建一个fork子进程来进行持久化，子进程中循环所有的数据，将数据写入到二进制文件中，会先将数据 写入到一个临时文件中，待持久化过程都结束了，在用这个临时文件替换上次持久化好了的文件。整个过程中，主进程是不进行任何IO操作的，确保极高的性能，如果需要进行大规模数据的回复，且对数据恢复的完整性不是非常敏感，那RDB方式要比AOF方式更加高效。<strong>RDB的缺点就是最后一次持久化后的数据可能丢失。</strong></li></ul></li></ul></li></ul><p><strong>RDB保存的文件就是dump.rdb</strong><br><strong>当我们修改了配置文件后，直接使用save命令就可以保存修改</strong><br><strong>1.触发机制</strong><br>(1)save的规则满足的情况下，会自动触发rdb规则<br>(2)执行 flushall 命令，也会触发我们的rdb规则！<br>(3)退出redis，也会产生 rdb 文件！<br>备份就自动生成一个 dump.rdb</p><p><strong>2.如何恢复rdb文件？</strong><br>(1)只需要将rdb文件放在我们redis启动目录就可以，redis启动的时候会自动检查dump.rdb 恢复其中的数据！<br>(2)查看需要存在的位置<br>127.0.0.1:6379&gt; config get dir </p><ol><li>“dir” </li><li>“&#x2F;usr&#x2F;local&#x2F;bin” ## 如果在这个目录下存在 dump.rdb 文件，启动就会自动恢复其中的数据</li></ol><p>几乎Redis的默认配置就够用了，但是我们还是需要去学习！<br><strong>RDB优点：</strong><br>1、适合大规模的数据恢复！<br>2、对数据的完整性要不高！</p><p><strong>RDB缺点：</strong><br>1、需要一定的时间间隔进程操作！如果redis意外宕机了，这个最后一次修改数据就没有的了！<br>2、fork进程的时候，会占用一定的内容空间<br><a href="https://blog.51cto.com/zhangzhixi/3175577"></a></p><h4 id="9-2-AOF（Append-Only-File）"><a href="#9-2-AOF（Append-Only-File）" class="headerlink" title="9.2 AOF（Append Only File）"></a>9.2 AOF（Append Only File）</h4><p>将我们的所有命令都记录下来，history，恢复的时候就把这个文件全部在执行一遍！</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650210740913-b53e2d50-e1aa-4042-ac7e-bb8d009f9375.png##clientId=u8a2ba187-a65d-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u0084cf48&margin=%5Bobject%20Object%5D&originHeight=776&originWidth=999&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uc6033a2a-750b-4931-85fa-77817e76e14&title="></p><p>以日志的形式来记录每个写操作，将Redis执行过的所有指令记录下来（读操作不记录），只许追加文件但不可以改写文件，redis启动之初会读取该文件重新构建数据，换言之，redis重启的话就根据日志文件的内容将写指令从前到后执行一次以完成数据的恢复工作<br>Aof保存的是 appendonly.aof 文件</p><hr><p>append<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650210770377-366e2ea1-bb26-4d0b-9ead-faffedf82f40.png##clientId=u8a2ba187-a65d-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u44cf95c3&margin=%5Bobject%20Object%5D&originHeight=572&originWidth=1113&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u95fea192-c76e-4d7c-a876-e8a12c29965&title="><br>默认是不开启的，我们需要手动进行配置！我们只需要将 appendonly 改为yes就开启了 aof！<br>重启，redis 就可以生效了！<br>如果<strong>这个 aof 文件有错误，这时候 redis 是启动不起来的</strong>，我们需要修复这个aof文件<br>redis 给我们提供了一个工具 redis-check-aof –fix<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650210795417-be20bd78-178a-4b36-838f-1031a4878220.png##clientId=u8a2ba187-a65d-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u07f4fc2f&margin=%5Bobject%20Object%5D&originHeight=197&originWidth=1194&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u9fc3803b-8528-4d8d-ab83-931279ec6c0&title="><br> 如果文件正常，重启就可以直接恢复了！<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650210813030-8d378904-7213-461f-93dd-2c24c6ba0c0d.png##clientId=u8a2ba187-a65d-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u0251cbb3&margin=%5Bobject%20Object%5D&originHeight=345&originWidth=1184&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uc0e122d1-7f93-45b4-9523-11a3e6c6615&title="></p><hr><p><strong>重写规则说明</strong></p><p>aof 默认就是文件的无限追加，文件会越来越大！<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650210846808-0286e3e4-d46d-4ede-80a4-322844459466.png##clientId=u8a2ba187-a65d-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uda9ab224&margin=%5Bobject%20Object%5D&originHeight=665&originWidth=1110&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u59783648-68d5-40b9-a960-839e96070f4&title="><br>如果 aof 文件大于 64m，太大了！ fork一个新的进程来将我们的文件进行重写！</p><hr><p><strong>AOF优点</strong>：</p><ul><li>每次修改都同步，文件的完成性会更好</li><li>每秒同步一次，<strong>可能会丢失最后一秒数据</strong></li><li>从不同步，效率最高</li></ul><p><strong>AOF缺点：</strong></p><ul><li>相对于rdb，aof远大于rdb，修复速度也比rdb慢</li><li>aof运行效率也比rdb慢，因此默认rdb</li></ul><p>扩展：<br>1、RDB 持久化方式能够在指定的时间间隔内对你的数据进行快照存储<br>2、AOF 持久化方式记录每次对服务器写的操作，当服务器重启的时候会重新执行这些命令来恢复原始的数据，AOF命令以Redis 协议追加保存每次写的操作到文件末尾，Redis还能对AOF文件进行后台重写，使得AOF文件的体积不至于过大。<br>3、只做缓存，如果你只希望你的数据在服务器运行的时候存在，你也可以不使用任何持久化<br>4、同时开启两种持久化方式<br>在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。RDB 的数据不实时，同时使用两者时服务器重启也只会找AOF文件，那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库（AOF在不断变化不好备份），快速重启，而且不会有AOF可能潜在的Bug，留着作为一个万一的手段。<br>5、性能建议<br>因为RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留 save 900 1 这条规则。如果Enable AOF ，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了，代价一是带来了持续的IO，二是AOF rewrite 的最后将 rewrite 过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上，默认超过原大小100%大小重写可以改到适当的数值。如果不Enable AOF ，仅靠 Master-Slave Repllcation 实现高可用性也可以，能省掉一大笔IO，也减少了rewrite时带来的系统波动。代价是如果Master&#x2F;Slave 同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个 Master&#x2F;Slave 中的 RDB文件，载入较新的那个，微博就是这种架构。</p><h2 id="10-订阅发布"><a href="#10-订阅发布" class="headerlink" title="10. 订阅发布"></a>10. 订阅发布</h2><p>Redis 发布订阅(pub&#x2F;sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。微信、微博、关注系统！<br>Redis 客户端可以订阅任意数量的频道。</p><p>订阅&#x2F;发布消息图：<br>第一个：消息发送者， 第二个：频道 第三个：消息订阅者！<a href="https://blog.51cto.com/zhangzhixi/3175577"></a><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650285249827-42117319-aa8e-481c-978a-4330a27026f5.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u8ea750d8&margin=%5Bobject%20Object%5D&originHeight=451&originWidth=1088&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u79c7a054-4705-4ff8-a8a7-e9600ff51ff&title="></p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650285282271-8a14c418-37eb-4053-96b1-3670c730e8aa.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u4fa7b9b7&margin=%5Bobject%20Object%5D&originHeight=358&originWidth=591&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ue61e377f-69e0-4b87-8db6-28e400009f1&title="></p><p> 当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650285297639-b3e7d68f-3b8b-4adf-92a6-2635b6ad31dc.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ue57afe77&margin=%5Bobject%20Object%5D&originHeight=518&originWidth=584&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ue13445e1-071c-4f5d-8e53-b1136af6573&title="></p><hr><p><strong>命令</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650285325585-999f5581-ff58-4d55-aa21-d974734a0de3.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u61d0163e&margin=%5Bobject%20Object%5D&originHeight=632&originWidth=578&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ud1c69843-079f-45cd-b781-08d1e841a38&title="></p><h2 id="11-主从复制"><a href="#11-主从复制" class="headerlink" title="11. 主从复制"></a>11. 主从复制</h2><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点(master&#x2F;leader)，后者称为从节点(slave&#x2F;follower)；数据的复制是单向的，只能由主节点到从节点。<br>Master以写为主，Slave 以读为主。<br>　　<strong>默认情况下，每台Redis服务器都是主节点；</strong><br>且一个主节点可以有多个从节点(或没有从节点)，但一个从节点只能有一个主节点。</p><p><strong>主从复制的作用主要包括：</strong><br>1、数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。<br>2、故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。<br>3、负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务（即写Redis数据时应用连接主节点，读Redis数据时应用连接从节点），分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高Redis服务器的并发量。<br>4、高可用（集群）基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是Redis高可用的基础。<br>一般来说，要将Redis运用于工程项目中，只使用一台Redis是万万不能的（宕机），原因如下：<br>1、从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；<br>2、从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，单台Redis最大使用内存不应该超过20G。<br>电商网站上的商品，一般都是一次上传，无数次浏览的，说专业点也就是”多读少写”。</p><p>对于这种场景，我们可以使如下这种架构：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650286930592-6c5af5e6-2a3d-419a-ba2e-3a4cb15335ab.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u223a61ea&margin=%5Bobject%20Object%5D&originHeight=724&originWidth=1099&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ued1825c9-1ce9-44e7-8f49-1ad8325ae57&title="><br>主从复制，读写分离！ 80% 的情况下都是在进行读操作！减缓服务器的压力！架构中经常使用！ 一主二从！</p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p><strong>只配置从库，不用配置主库！</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650287001813-3cd41d83-3f0a-4ed0-a13f-4f858e3b0a9b.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=698&id=u8695758a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=698&originWidth=1220&originalType=binary&ratio=1&rotation=0&showTitle=false&size=122007&status=done&style=none&taskId=u3118214a-9007-41cd-ab04-931d854eb17&title=&width=1220" alt="image.png"></p><h4 id="一主二从"><a href="#一主二从" class="headerlink" title="一主二从"></a>一主二从</h4><p><strong>默认情况下，每台redis服务器都是主节点！！</strong></p><p>认老大！ 一主 （79）二从（80，81）<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650287086432-e858ec80-a0ed-4224-b49e-9471bcc581cc.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ubb8d6bbf&margin=%5Bobject%20Object%5D&originHeight=460&originWidth=817&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ud5bd7a52-cdd3-421e-a145-92098c42059&title="><br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650287103949-ef5df0ff-a685-4af4-8bc7-c5742545a14c.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=749&id=u1a64211d&margin=%5Bobject%20Object%5D&name=image.png&originHeight=749&originWidth=1092&originalType=binary&ratio=1&rotation=0&showTitle=false&size=80399&status=done&style=none&taskId=u5b69e22c-c48f-4e7b-a414-08cdf6effaf&title=&width=1092" alt="image.png"></p><hr><p><strong>注意</strong><br>主机可以写，从机不能写只能读！主机中的所有信息和数据，都会自动被从机保存！<br>主机写：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650287146573-e3fa37f9-7396-48ef-8646-4cfa19151e38.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u516ae957&margin=%5Bobject%20Object%5D&originHeight=116&originWidth=628&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ud4add2bc-61e5-4d96-a3b0-ce8adba7084&title="><br>从机只能读取，不能写入：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650287161547-625d9c89-1713-40ce-94d8-90a21437b1eb.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc02ee335&margin=%5Bobject%20Object%5D&originHeight=176&originWidth=661&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uead97089-5cf5-4232-9850-d5946f3fd66&title="><br>测试：主机断开连接，<strong>从机依旧连接到主机的，但是没有写操作</strong>，这个时候，主机如果回来了，从机依旧可以直接获取到主机写的信息！</p><p>如果是使用命令行，来配置的主从，这个时候如果重启了，从机就会变回主机，与之前的主机断开连接！<br><strong>只要再变为从机，立马就会从主机中获取值！</strong></p><h2 id="12-哨兵模式"><a href="#12-哨兵模式" class="headerlink" title="12. 哨兵模式"></a>12. 哨兵模式</h2><p>　主从切换技术的方法是：当主服务器宕机后，需要手动把一台从服务器切换为主服务器，这就需要人工干预，费事费力，还会造成一段时间内服务不可用。这不是一种推荐的方式，更多时候，我们优先考虑哨兵模式。</p><p>Redis从2.8开始正式提供了Sentinel（哨兵） 架构来解决这个问题。<br>谋朝篡位的自动版，能够后台监控主机是否故障，如果故障了根据投票数自动将从库转换为主库。</p><p>哨兵模式是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，作为进程，它会独立运行。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例。<br>这里的哨兵有两个作用</p><p>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器。<br>当哨兵监测到master宕机，会自动将slave切换成master，然后通过发布订阅模式通知其他的从服务器，修改配置文件，让它们切换主机。<br>然而一个哨兵进程对Redis服务器进行监控，可能会出现问题，为此，我们可以使用多个哨兵进行监控。各个哨兵之间还会进行监控，这样就形成了多哨兵模式。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650289429010-e306c700-439f-404f-9be2-c6229d6ede0d.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u89d7d337&margin=%5Bobject%20Object%5D&originHeight=560&originWidth=1051&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u498ec645-7144-4d33-916c-5cb850ba760&title="></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象成为<strong>主观下线</strong>。当后面的哨兵也检测到主服务器不可用，并且数量达到一定值时，那么哨兵之间就会进行一次投票，投票的结果由一个哨兵发起，进行failover[故障转移]操作。<br>切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线。</strong></p><p>我们目前的状态是 一主二从！<br><strong>配置步骤：</strong><br>1、配置哨兵配置文件 sentinel.conf</p><pre class="line-numbers language-none"><code class="language-none">sentinel monitor 哨兵名称 local post 1(表示有几个哨兵通过就让它称为老大)sentinel monitor myredis 182.92.209.212 6379 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.启动哨兵<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650289522530-e51e399e-5f5c-4c75-b98e-a61b20c8ca9a.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u69c24dbb&margin=%5Bobject%20Object%5D&originHeight=666&originWidth=1108&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ud0f67cce-04b5-4671-88e6-3321641cf4d&title="></p><p>如果Master 节点断开了，这个时候就会从从机中随机选择一个服务器！ （这里面有一个投票算法！）<br>如果主机此时回来了，<strong>只能归并到新的主机下，当做从机</strong>，这就是哨兵模式的规则！</p><p><strong>哨兵模式优缺点</strong><br><strong>优点：</strong><br>1、哨兵集群，基于主从复制模式，所有的主从配置优点，它全有<br>2、 主从可以切换，故障可以转移，系统的<strong>可用性</strong>就会更好<br>3、哨兵模式就是主从模式的升级，<strong>手动到自动</strong>，更加健壮！<br><strong>缺点：</strong><br>1、Redis <strong>不好在线扩容</strong>的，集群容量一旦到达上限，在线扩容就十分麻烦！<br>2、实现哨兵模式的<strong>配置其实是很麻烦</strong>的，里面有很多选择！</p><h2 id="13-缓存穿透和缓存雪崩"><a href="#13-缓存穿透和缓存雪崩" class="headerlink" title="13. 缓存穿透和缓存雪崩"></a>13. 缓存穿透和缓存雪崩</h2><p><strong>服务的高可用问题</strong></p><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它也带来了一些问题。其中，最要害的问题，就是数据的一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。</p><p>另外的一些典型问题就是，缓存穿透、缓存雪崩和缓存击穿。目前，业界也都有比较流行的解决方案。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650289796937-5d2e880b-a99e-40b3-8c45-cad92a2829d0.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u5d7c0a33&margin=%5Bobject%20Object%5D&originHeight=473&originWidth=1033&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=ua4258262-59a4-43c7-8ac8-1253a25397b&title="></p><h4 id="缓存穿透（查不到数据）"><a href="#缓存穿透（查不到数据）" class="headerlink" title="缓存穿透（查不到数据）"></a>缓存穿透（查不到数据）</h4><p>缓存穿透的概念很简单，用户想要查询一个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询。发现也没有，于是本次查询失败。当用户很多的时候，缓存都没有命中（秒杀！），于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p><p>解决方案 ：布隆过滤器 和 缓存空对象<br>布隆过滤器是一种数据结构，对所有可能查询的参数<strong>以hash形式</strong>存储，在<strong>控制层先进行校验</strong>，不符合则丢弃，从而避免了对底层存储系统的查询压力。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650289943140-43e5375b-c1b0-46f0-9f06-5fdc8851c6cc.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u5ae3c53e&margin=%5Bobject%20Object%5D&originHeight=653&originWidth=655&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=u2cac1ec1-f8f9-40c0-9551-31bf378f6cf&title="></p><p>缓存空对象<br>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650290256789-afaa0834-5eea-429d-8f9e-0cba2e4ccbfd.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u5faf905a&margin=%5Bobject%20Object%5D&originHeight=657&originWidth=578&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uf53ff829-2c96-4593-adcc-49fabfe5f9d&title="><br>但是这种方法会存在两个问题：</p><ul><li>1、如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；</li><li>2、即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段<strong>时间窗口的不一致</strong>，这对于需要<strong>保持一致性</strong>的业务会有影响。</li></ul><h4 id="缓存击穿（量太大，缓存过期）"><a href="#缓存击穿（量太大，缓存过期）" class="headerlink" title="缓存击穿（量太大，缓存过期）"></a>缓存击穿（量太大，缓存过期）</h4><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，<strong>持续的大并发就穿破缓存</strong>，直接请求数据库，就像在一个屏障上凿开了一个洞。<br>当某个key在过期的瞬间，有大量的请求并发访问，<strong>这类数据一般是热点数据</strong>，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导使数据库瞬间压力过大。</p><p>解决方案： </p><ul><li>设置热点数据不过期<ul><li>从缓存层面来看，没有设置过期时间，所以不会出现热点 key 过期后产生的问题。</li></ul></li><li>加互斥锁<ul><li>使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</li></ul></li></ul><h4 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h4><p>缓存雪崩，是指在某一个时间段，<strong>缓存集中过期失效</strong>。Redis 宕机！<br>产生雪崩的原因之一，比如在写本文的时候，马上就要到双十二零点，很快就会迎来一波抢购，这波商品时间比较集中的放入了缓存，假设缓存一个小时。那么到了凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，<strong>就会产生周期性的压力波</strong>峰。于是所有的请求都会达到存储层，<strong>存储层的调用量会暴增</strong>，造成存储层也会挂掉的情况。</p><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1650290628209-57409a28-b0f4-48ae-b19c-410998731809.png##clientId=ue836c7aa-ce6f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u8677da01&margin=%5Bobject%20Object%5D&originHeight=640&originWidth=1109&originalType=url&ratio=1&rotation=0&showTitle=false&status=done&style=none&taskId=uaf5e9a9e-66dd-46af-8586-8d8a3f6c92c&title="></p><p>其实集中过期，倒不是非常致命，比较致命的缓存雪崩，是<strong>缓存服务器某个节点宕机或断网</strong>。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很有可能瞬间就把数据库压垮。</p><p>解决方案：</p><ul><li>redis高可用</li></ul><p>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。（异地多活！）</p><ul><li>限流降级（在SpringCloud讲解过！）</li></ul><p>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><ul><li>数据预热</li></ul><p>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让<br>缓存失效的时间点尽量均匀。<br><a href="https://blog.51cto.com/zhangzhixi/3175577"></a></p><p><a href="https://blog.51cto.com/zhangzhixi/3175577"></a></p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql基础知识</title>
      <link href="/2022/04/13/Mysql%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2022/04/13/Mysql%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><ul><li><p><strong>mysql关键字不区分大小写</strong></p></li><li><p>创建数据库     </p><pre class="line-numbers language-none"><code class="language-none">create database [if not exists] westos;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>删除数据库</p><pre class="line-numbers language-none"><code class="language-none">drop database [if exists] westos;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用数据库</p><pre class="line-numbers language-none"><code class="language-none">use &#96;school&#96;-- 如果你的表名或者字段名是一个特殊字符（关键字），就需要带&#96;&#96;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a name="bAxBQ"></a></p></li></ul><h2 id="数据库的列类型"><a href="#数据库的列类型" class="headerlink" title="数据库的列类型"></a>数据库的列类型</h2><p><a name="ZvL3k"></a></p><h4 id="1-数值"><a href="#1-数值" class="headerlink" title="1.数值"></a>1.数值</h4><pre><code>        - **整数**           1. tinyint  1个字节           1. smallint 2个字节           1. mediumint 3个字节           1. **int 4个字节**           1. bigint 8个字节        - 小数           1. float 4个字节           1. double 8个字节           1. decimal 字符串形式的浮点数</code></pre><p><a name="p7DiI"></a></p><h4 id="2-字符串"><a href="#2-字符串" class="headerlink" title="2.字符串"></a>2.字符串</h4><pre><code>        1. char 字符串固定大小的0-255        1. **varchar 可变字符串 0-65535常用的 String**        1. tinytext 微型文本 2^8-1        1. text 文本串 2^16-1</code></pre><p><a name="rCRjW"></a></p><h4 id="3-时间日期"><a href="#3-时间日期" class="headerlink" title="3.时间日期"></a>3.时间日期</h4><pre><code>        1. date YYYY-MM-DD 日期        1. time HH:mm：ss 时间格式        1. **datetime YYYY-MM-DD HH:mm：ss 最常用**        1. timestamp 时间戳 1970 1.1 到现在的毫秒数        1. year 年份表示</code></pre><p><a name="Jb3Dd"></a></p><h4 id="4-null"><a href="#4-null" class="headerlink" title="4.null"></a>4.null</h4><pre><code>        1. 没有值，未知         1. ==不要使用NULL进行运算</code></pre><p><a name="SVqqK"></a></p><h2 id="数据库的字段属性（重点）"><a href="#数据库的字段属性（重点）" class="headerlink" title="数据库的字段属性（重点）"></a>数据库的字段属性（重点）</h2><pre><code>     - unsigned ： 该列不能声明为负数     - zerofill：零填充      - 自增： 自动在上一条记录的基础上+1（默认）通常用来设计唯一的主键~index，必须是整数类型。     - 非空 ：Not null     - default ： 设置默认的值</code></pre><pre class="line-numbers language-none"><code class="language-none">&#x2F;* 每一个表，都必须存在以下五个字段！未来做项目用的，表示一个记录存在意义！id主键&#96;version&#96;乐观锁is_delete伪删除gmt_create创建时间gmt_update修改时间*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="z1lSm"></a></p><h2 id="创建数据库表"><a href="#创建数据库表" class="headerlink" title="创建数据库表"></a>创建数据库表</h2><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE IF NOT EXISTS &#96;student&#96; (&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,&#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,&#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;密码&#39;,&#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,&#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,&#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;家庭住址&#39;,&#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,PRIMARY KEY(&#96;id&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="MwNAO"></a></p><h4 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h4><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE [IF NOT EXISTS] &#96;表名&#96;(&#96;字段名&#96; 列属性 [属性] [索引] [注释]，    &#96;字段名&#96; 列属性 [属性] [索引] [注释]，    ......    &#96;字段名&#96; 列属性 [属性] [索引] [注释])[表类型][字符集设置][注释]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="Bk7eN"></a></p><h2 id="关于数据库引擎"><a href="#关于数据库引擎" class="headerlink" title="关于数据库引擎"></a>关于数据库引擎</h2><ul><li>Innodb：默认使用</li><li>MYISAM ：早些年使用</li></ul><p>区别：</p><table><thead><tr><th><br /></th><th>MYISAM</th><th>INNODB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键约束</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间的大小</td><td>较少</td><td>较大，约为MYISAM的2倍</td></tr></tbody></table><p>常规使用操作：<br />MYISAM: 节约空间，速度较快<br />Innodb：安全性高，事物的处理，多表多用户操作</p><p><a name="emxyx"></a></p><h2 id="修改删除表"><a href="#修改删除表" class="headerlink" title="修改删除表"></a>修改删除表</h2><p><a name="TKXo0"></a></p><h4 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h4><pre class="line-numbers language-none"><code class="language-none">-- 修改表名ALTER TABLE 旧表名 RENAME AS 新表名ALTER TABLE student RENAME AS student1-- 增加表的字段 ALTER TABLE 表名 ADD 字段名 字段的列属性ALTER TABLE student1 ADD age INT(3)-- 修改表的字段 （重命名，修改约束！）-- ALTER TABLE 表名 MODIFY 字段名 列属性[]ALTER TABLE student1 MODIFY age VARCHAR(3)   -- 修改约束-- ALTER TABLE 表名 MODIFY 旧字段名 新字段名 列属性[]ALTER TABLE student1 CHANGE age Age INT(3)   -- 字段重命名-- 删除表的字段ALTER TABLE 表名 DROP 字段名ALTER TABLE student1 DROP Age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="WoGI6"></a></p><h4 id="删除："><a href="#删除：" class="headerlink" title="删除："></a>删除：</h4><pre class="line-numbers language-none"><code class="language-none">-- 删除表（如果表存在再删除）DROP TABLE IF EXISTS teacher<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><a name="NvsTd"></a></p><h2 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h2><pre class="line-numbers language-none"><code class="language-none">CREATE TABLE IF NOT EXISTS &#96;grade&#96; (&#96;gradeid&#96; INT(10) NOT NULL AUTO_INCREMENT COMMENT &#39;年级id&#39;,&#96;gradename&#96; VARCHAR(50) NOT NULL COMMENT &#39;年级名称&#39;,PRIMARY KEY(&#96;gradeid&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8CREATE TABLE IF NOT EXISTS &#96;student&#96; (&#96;id&#96; INT(4) NOT NULL AUTO_INCREMENT COMMENT &#39;学号&#39;,&#96;name&#96; VARCHAR(30) NOT NULL DEFAULT &#39;匿名&#39; COMMENT &#39;姓名&#39;,&#96;pwd&#96; VARCHAR(20) NOT NULL DEFAULT &#39;123456&#39; COMMENT &#39;密码&#39;,&#96;sex&#96; VARCHAR(2) NOT NULL DEFAULT &#39;女&#39; COMMENT &#39;性别&#39;,&#96;birthday&#96; DATETIME DEFAULT NULL COMMENT &#39;出生日期&#39;,&#96;gradeid&#96; INT(10) NOT NULL COMMENT &#39;学生的年级&#39;,&#96;address&#96; VARCHAR(100) DEFAULT NULL COMMENT &#39;家庭住址&#39;,&#96;email&#96; VARCHAR(50) DEFAULT NULL COMMENT &#39;邮箱&#39;,PRIMARY KEY(&#96;id&#96;))ENGINE&#x3D;INNODB DEFAULT CHARSET&#x3D;utf8ALTER TABLE &#96;student&#96;ADD CONSTRAINT &#96;FK_gradeid&#96; FOREIGN KEY (&#96;gradeid&#96;) REFERENCES &#96;grade&#96; (&#96;gradeid&#96;)-- ALTER TABLE 表名 ADD CONSTRAINT 约束名 FOREIGN KEY（作为外键的列）REFERENCES 哪个表（哪个字段）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上的操作都是物理外键，数据库级别的外键，不建议使用！（避免数据库过多造成困扰）<br /><strong>最佳实践</strong></p><ul><li>数据库就是单纯的表，只用来存数据，只有行（数据）和列（字段）</li><li>我们想使用多张表的数据，想使用外键（程序去实现）<br><a name="VR11g"></a></li></ul><h2 id="sql操作"><a href="#sql操作" class="headerlink" title="sql操作"></a>sql操作</h2><p><a name="BZw8Q"></a></p><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p>语法：<code>insert into 表名([字段1,字段2,字段3]) values(&#39;值1&#39;),(&#39;值2&#39;),(&#39;值3&#39;,...)</code></p><pre class="line-numbers language-none"><code class="language-none">-- 插入语句（添加）-- insert into 表名([字段1,字段2,字段3]) values(&#39;值1&#39;),(&#39;值2&#39;),(&#39;值3&#39;,...)INSERT INTO &#96;grade&#96;(&#96;gradename&#96;) VALUES (&#39;大四&#39;)-- 由于主键自增我们可以省略 （如果不写表的字段，他就会一一匹配）INSERT INTO &#96;grade&#96; VALUES (&#39;大三&#39;)-- 一般写插入语句，我们一定要数据和字段一一对应！-- 插入多个字段INSERT INTO &#96;grade&#96;(&#96;gradename&#96;) VALUES (&#39;大三&#39;),(&#39;大二&#39;),(&#39;大一&#39;)INSERT INTO &#96;student&#96;(&#96;name&#96;) VALUES (&#39;张三&#39;)INSERT INTO &#96;student&#96;(&#96;name&#96;,&#96;pwd&#96;,&#96;sex&#96;) VALUES (&#39;张三&#39;,&#39;aaaaaa&#39;,&#39;男&#39;)INSERT INTO &#96;student&#96;(&#96;name&#96;,&#96;pwd&#96;,&#96;sex&#96;) VALUES (&#39;李四&#39;,&#39;aaaaaa&#39;,&#39;男&#39;),(&#39;王五&#39;,&#39;aaaaaa&#39;,&#39;男&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><pre><code>  1. 字段和字段之间使用英文逗号隔开  1. 字段是可以省略的，但是后面的值必须要一一对应，不能少  1. 可以同时插入多条数据，VALUES后面的值，需要使用，隔开即可VALUSE (),(),...</code></pre><p><a name="LYeek"></a></p><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>语法：UPDATE 表名 SET colnum_name&#x3D;value，[colnum_name&#x3D;value,…] WHERE [条件]</p><p><a name="gFZum"></a></p><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>语法：delete from 表名 [where 条件]&#96;<br />Truncate命令：完全清空一个数据库表，表的结构和索引约束不会变！<br><a name="nHAac"></a></p><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>语法：SELECT 字段,… FROM 表</p><p><strong>distinct</strong><br />作用：去除SELECT查询出来的结果中重复的数据，重复的数据只显示一条</p><p><a name="DZMxb"></a></p><h6 id="联表查询"><a href="#联表查询" class="headerlink" title="联表查询"></a>联表查询</h6><p>Join<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648484644146-dff18579-65cd-4869-b455-affe56c8fdf8.png" alt="image.png"><br />   </p><table><thead><tr><th>操作符名称</th><th>描述</th></tr></thead><tbody><tr><td>INNER JOIN</td><td>如果表中至少有一个匹配，则返回行</td></tr><tr><td>LEFT JOIN</td><td>即使右表中没有匹配，也从左表中返回所有的行</td></tr><tr><td>RIGHT JOIN</td><td>即使左表中没有匹配，也从右表中返回所有的行</td></tr></tbody></table><p><strong>自连接</strong><br />自己的表和自己的表连接，核心：<strong>一张表拆为两张一样的表即可</strong><br><a name="gJmwK"></a></p><h4 id="分页和排序"><a href="#分页和排序" class="headerlink" title="分页和排序"></a>分页和排序</h4><p><a name="L8XZn"></a></p><h6 id="排序："><a href="#排序：" class="headerlink" title="排序："></a>排序：</h6><pre><code>     - 关键字：order by     - 升序 : asc     - 降序 ：desc</code></pre><p><a name="hqWZD"></a></p><h6 id="分页："><a href="#分页：" class="headerlink" title="分页："></a>分页：</h6><pre><code>     - 语法：limit 起始页 页面的大小</code></pre><p><a name="Dj0Iv"></a></p><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><table><thead><tr><th>函数名称</th><th>描述</th></tr></thead><tbody><tr><td>COUNT()</td><td>计数</td></tr><tr><td>SUM()</td><td>求和</td></tr><tr><td>AVG()</td><td>平均值</td></tr><tr><td>MAX()</td><td>最大值</td></tr><tr><td>MIN()</td><td>最小值</td></tr></tbody></table><p>注意：</p><ul><li>从含义上讲，count(1) 与 count(*) 都表示对全部数据行的查询。<ul><li>count(字段) 会统计该字段在表中出现的次数，忽略字段为null 的情况。即不统计字段为null 的记录。</li><li>count(*) 包括了所有的列，相当于行数，在统计结果的时候，包含字段为null 的记录；</li><li>count(1) 用1代表代码行，在统计结果的时候，包含字段为null 的记录 。<br><a name="FJmoq"></a></li></ul></li></ul><h4 id="分组和过滤"><a href="#分组和过滤" class="headerlink" title="分组和过滤"></a>分组和过滤</h4><pre class="line-numbers language-none"><code class="language-none">-- 查询不同课程的平均分,最高分,最低分-- 前提:根据不同的课程进行分组SELECT subjectname,AVG(studentresult) AS 平均分,MAX(StudentResult) AS 最高分,MIN(StudentResult) AS 最低分FROM result AS rINNER JOIN &#96;subject&#96; AS sON r.subjectno &#x3D; s.subjectnoGROUP BY r.subjectno --通过什么字段来分组HAVING 平均分&gt;80;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>分组之后，只能用having过滤</strong></p><p><a name="XkaND"></a></p><h2 id="数据库级别的MD5"><a href="#数据库级别的MD5" class="headerlink" title="数据库级别的MD5"></a>数据库级别的MD5</h2><ul><li>主要增强算法复杂度和不可逆性</li><li>MD5<strong>不可逆</strong>，具体的值的MD5是一样的</li><li>MD5破解网站的原理，背后有一个字典，MD5加密后的值，加密的前值<br><a name="ZVnEq"></a></li></ul><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>定义：将一组sql放在一个批次中去执行<br><a name="mfaZW"></a></p><h4 id="事务-ACID原则"><a href="#事务-ACID原则" class="headerlink" title="事务 ACID原则"></a>事务 ACID原则</h4><pre><code>        - 原子性（Atomicity）</code></pre><p><strong>不可分割，要么都成功，要么都失败</strong></p><pre><code>        - 一致性（Consistency）</code></pre><p><strong>事务前后的数据的完整性保持一致</strong></p><pre><code>        - 隔离性（Isolation）</code></pre><p><strong>事务的隔离型性是多个用户并发访问数据库时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</strong></p><pre><code>        - 持久性（Durabilty）</code></pre><p><strong>事务一旦提交则不可逆，被持久化到数据库中</strong><br><a name="OddDZ"></a></p><h4 id="引发的问题"><a href="#引发的问题" class="headerlink" title="引发的问题"></a>引发的问题</h4><p><a name="Z5w5Z"></a></p><h6 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h6><p>一个事务读取了另一个事物未提交的数据<br><a name="tKYK4"></a></p><h6 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h6><p>在一个事务内读取表中某一行的数据，多次读取的结果不同<br><a name="GbnC2"></a></p><h6 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h6><p>在一个事务内读取到了另一个事务插入的数据，导致前后读取的数据总量不一致。  <br />MySQL是默认开启事务提交的</p><pre class="line-numbers language-none"><code class="language-none">-- 事务-- mysql是默认开启事务自动提交的SET autocommit &#x3D; 0 -- 关闭SET autocommit &#x3D; 1 -- 开启（默认的）-- 手动处理事务SET autocommit &#x3D; 0 -- 关闭自动提交-- 事务开启START TRANSACTION -- 标记一个事务的开始，从这个之后的sql都在同一个事务内-- 提交 ： 持久化 （成功！）COMMIT-- 回滚： 回到原来的样子 （失败！）ROLLBACK-- 事务结束SET autocommit &#x3D; 1 -- 开启自动提交SAVEPOINT 保存点名 -- 设置一个事务的保存点ROLLBACK TO SAVEPOINT 保存点名 -- 回滚到保存点RELEASE SAVEPOINT 保存点名 -- 撤销保存点<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a name="SG1wt"></a></p><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>本质：是一种数据结构，帮助高效获取数据。<br><a name="y2z0u"></a></p><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><ul><li>主键索引（primary key）</li></ul><p>唯一标识，主键不可重复，只能有一个列作为主键</p><ul><li>唯一索引（Unique key）</li></ul><p>可重复，避免重复的列出现，多个列都可以标识为唯一索引</p><ul><li>常规索引（key&#x2F;index）</li></ul><p>默认，index&#x2F;key 来设置</p><ul><li>全文索引（FullText）</li></ul><p>在特定的数据库引擎下才有，如：MyISAM<br />快速定位数据<br><a name="xUGbf"></a></p><h4 id="索隐原则："><a href="#索隐原则：" class="headerlink" title="索隐原则："></a>索隐原则：</h4><ul><li>不是越多越好</li><li>不要对进程变动数据加索引</li><li>小数据量的表不需要加索引</li><li>索引一般加在常用来查询的字段上<br><a name="IAacW"></a></li></ul><h4 id="数据结构：B-TREE（Innodb的默认数据结构）"><a href="#数据结构：B-TREE（Innodb的默认数据结构）" class="headerlink" title="数据结构：B TREE（Innodb的默认数据结构）"></a>数据结构：B TREE（Innodb的默认数据结构）</h4><p><a name="IQDeT"></a></p><h2 id="数据库三大范式"><a href="#数据库三大范式" class="headerlink" title="数据库三大范式"></a>数据库三大范式</h2><p><strong>为什么需要数据规范化？</strong></p><ul><li>信息重复</li><li>更新异常</li><li>插入异常<ul><li>无法正常显示信息</li></ul></li><li>删除异常<ul><li>丢失有效的信息</li></ul></li></ul><p><strong>三大范式</strong><br><a name="ittiW"></a></p><h4 id="第一范式-1st-NF"><a href="#第一范式-1st-NF" class="headerlink" title="第一范式 (1st NF)"></a>第一范式 (1st NF)</h4><p>要求数据库表的每一列都是不可分割的原子数据项。<br><a name="eyS6M"></a></p><h4 id="第二范式-2nd-NF"><a href="#第二范式-2nd-NF" class="headerlink" title="第二范式(2nd NF)"></a>第二范式(2nd NF)</h4><p>满足第二范式（2NF）必须先满足第一范式（1NF）。<br />第二范式要求每个表只描述一件事情<br /><strong>在第一范式的基础上，非主属性必须完全依赖于候选码（消除非主属性对于主码的部分函数依赖）</strong><br />确保每一列都和主键相关，而不能只与主键的某一部分相关<br><a name="gm1UK"></a></p><h4 id="第三范式-3rd-NF"><a href="#第三范式-3rd-NF" class="headerlink" title="第三范式(3rd NF)"></a>第三范式(3rd NF)</h4><p>满足第三范式（3NF）必须先满足第二范式（2NF）。<br /><strong>第三范式需要确保数据表中的每一列数据都和主键直接相关，而不能间接相关。</strong><br /><strong>任何非主属性不依赖于其他非主属性</strong><br /><strong>消除了传递依赖</strong></p><p>三个范式是规范了数据库的设计<br /><strong>规范性 和 性能的问题</strong><br />关联查询的表不得超过三张表</p><ul><li>考虑商业化的需求和目标，（成本，用户体验！）数据库的性能更加重要</li><li>在规范性能的问题的时候，需要适当的考虑一下 规范性！</li><li>故意给某些表增加一些冗余的字段。（从多表查询中变为单表查询）</li><li>故意增加一些计算列（从大数据量降低为小数据量的查询：索引）</li></ul>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM</title>
      <link href="/2022/04/13/JVM/"/>
      <url>/2022/04/13/JVM/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><ul><li>请你谈谈对JVM的理解? java8虚拟机和之前的变化更新</li><li>什么是OOM(内存溢出)? 什么是栈溢出(stackOverFlowError)? 怎么分析?</li><li>JVM常用的调优参数有哪些?</li><li>内存快照如何抓取? 怎么分析Domp文件 ? 知道吗?</li><li>谈谈JVM中,类加载器你的认识?</li></ul><h2 id="1-JVM的位置"><a href="#1-JVM的位置" class="headerlink" title="1.JVM的位置"></a>1.JVM的位置</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648544772214-88c91aeb-5084-40ed-9c39-0c263f359e4a.png#clientId=ua2864186-cdc8-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u0bda4197&originHeight=526&originWidth=524&originalType=url&ratio=1&rotation=0&showTitle=false&size=119986&status=done&style=none&taskId=ue48ccd1e-4dab-4c86-af41-84396fa35fe&title=" alt="image.png"></p><h2 id="2-jvm的体系"><a href="#2-jvm的体系" class="headerlink" title="2.jvm的体系"></a>2.jvm的体系</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648544892759-f947e880-ceb1-42db-b98e-8d5295b63562.png#clientId=ua2864186-cdc8-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u9136ed99&originHeight=586&originWidth=863&originalType=url&ratio=1&rotation=0&showTitle=false&size=141205&status=done&style=none&taskId=u395bb536-6df4-4fe2-b7f3-161c9f30130&title=" alt="image.png"><br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648545189519-c0d39c94-e78b-4ff1-99c8-023090c5a5b2.png#clientId=ua2864186-cdc8-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u4f6323d3&originHeight=525&originWidth=738&originalType=url&ratio=1&rotation=0&showTitle=false&size=117675&status=done&style=none&taskId=uc2c6e7e2-5ec3-427d-b07d-8180845e934&title=" alt="image.png"></p><h2 id="3-类加载器"><a href="#3-类加载器" class="headerlink" title="3.类加载器"></a>3.类加载器</h2><pre><code> 作用：加载 class文件</code></pre><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648545610429-11508ee3-4ac1-4533-8b86-4bb382797f39.png#clientId=ua2864186-cdc8-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uaabadb7f&originHeight=438&originWidth=741&originalType=url&ratio=1&rotation=0&showTitle=false&size=66883&status=done&style=none&taskId=u09a651ba-7a78-4883-9734-b2dbb1fcb67&title=" alt="image.png"><br />种类：</p><ul><li>虚拟机自带的加载器</li><li>启动类（根）加载器</li><li>扩展类加载器</li><li>应用程序加载器</li></ul><h2 id="4-双亲委派机制"><a href="#4-双亲委派机制" class="headerlink" title="4.双亲委派机制"></a>4.双亲委派机制</h2><p>app—&gt;扩展类(ext) —-&gt; (启动类)根加载器(rt)<br />当一个类收到了类加载请求，他首先不会尝试自己去加载这个类，而是把这个请求委派给父类去完成，每一个层次类加载器都是如此， 因此所有的加载请求都应该传送到启动类加载其中<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648547288200-e817c805-1153-4ccc-8b71-4fa78816f63d.png#clientId=ua2864186-cdc8-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u02054e79&originHeight=1240&originWidth=1312&originalType=url&ratio=1&rotation=0&showTitle=false&size=473279&status=done&style=none&taskId=u51bcbf5d-9d34-4b25-bb23-55565a4351b&title=" alt="image.png"><br /><strong>过程：</strong>当一个类加载请求开始时，首先从APPClassLoader进入，先判断是否已经加载过，若加载过则不再加载，若没加载过，则交给自己的上层扩展类加载器，然后相同步骤，若没加载过，再交给启动类加载器，若启动类加载器也没加载过，此时已经没有再上一层的加载器了，于是判断自己是否可以加载，如果不能加载，则下沉到下一层的扩展类加载器，以此类推，直到应用程序类加载器，如果最后都不能加载，则报出ClassNotFoundException错误</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul><li>避免重复加载类</li><li>沙箱安全机制</li></ul><h2 id="5-沙箱安全机制"><a href="#5-沙箱安全机制" class="headerlink" title="5.沙箱安全机制"></a>5.沙箱安全机制</h2><p>保证核心<a href="https://so.csdn.net/so/search?q=API&spm=1001.2101.3001.7020">API</a>源代码的保护，引导类加载器只加载核心API，不加载自定义的与核心API同名或同包名的API。</p><h2 id="6-Native"><a href="#6-Native" class="headerlink" title="6.Native"></a>6.Native</h2><p>Native 关键字 调用 本地方法栈—-&gt; JNI (java Native Interface本地方法接口) 调用外部语言程序<br /><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648719749093-fc63d693-66f6-4ddd-a0b6-c2d93d12db46.png#clientId=uc724b46b-187a-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u27af7b57&originHeight=170&originWidth=692&originalType=url&ratio=1&rotation=0&showTitle=false&size=163877&status=done&style=none&taskId=uc6b8be60-239f-48d9-a808-7bc33c406c2&title=" alt="image.png"></p><h2 id="7-程序计数器"><a href="#7-程序计数器" class="headerlink" title="7.程序计数器"></a>7.程序计数器</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648720191895-f42faef2-9093-4945-a6ab-01bd7fbc603b.png#clientId=uc724b46b-187a-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u8db8404b&originHeight=128&originWidth=838&originalType=url&ratio=1&rotation=0&showTitle=false&size=101469&status=done&style=none&taskId=u58c5c243-f703-4e50-852d-7ee764e785a&title=" alt="image.png"></p><h2 id="8-方法区"><a href="#8-方法区" class="headerlink" title="8.方法区"></a>8.方法区</h2><p>方法区是被所有线程共享的,所有字段和方法字节码,以及一些特殊方法,如构造函数,接口代码也在此定义,简单说,所有定义的方法的信息都保存在该区域,<strong>此区域属于共享区间</strong>;<br />静态变量(static),常量(final),类信息(构造方法,接口定义),运行时的常量池存在方法区中,但是实例变量存在堆内存中,和方法区无关.<br />static ,final, Class , 常量池</p><h2 id="9-栈"><a href="#9-栈" class="headerlink" title="9.栈"></a>9.栈</h2><p>栈:栈<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>,主管程序的运行,生命周期和线程同步;<br />线程结束,栈内存也就释放了,对于栈来说,不存在垃圾回收问题<br />一旦线程结束,栈就Over<br /><strong>主要存储</strong>：8大基本类型+ 对象引用+实例的方法</p><h2 id="10-堆"><a href="#10-堆" class="headerlink" title="10.堆"></a>10.堆</h2><p>一个JVM只有一个堆内存，堆内存的大小是可以调节的<br />堆内存中还要细分为三个区域:</p><ul><li>新生区 (伊甸园区) Young&#x2F;New ,eden space</li><li>养老区 old</li><li>永久区 Permanent jdk8之后叫做 “元空间”</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648733899530-02206d74-10b0-41e6-b782-a205317234a9.png#clientId=uc724b46b-187a-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ud0377ec7&originHeight=574&originWidth=811&originalType=url&ratio=1&rotation=0&showTitle=false&size=137333&status=done&style=none&taskId=uef230b42-b2c5-4a52-bbf8-cd5cb9d236a&title=" alt="image.png"></p><h3 id="新生区（满了-轻GC）"><a href="#新生区（满了-轻GC）" class="headerlink" title="新生区（满了 轻GC）"></a>新生区（满了 轻GC）</h3><ul><li><p>类 ： 诞生和成长的地方 ， 甚至死亡；</p></li><li><p>伊甸园， 所有的对象都是在伊甸园区new出来的</p></li><li><p>幸存区（0，1）</p></li><li><p>经研究99%的对象都是临时对象</p><h3 id="老年区（满了-重GC）"><a href="#老年区（满了-重GC）" class="headerlink" title="老年区（满了 重GC）"></a>老年区（满了 重GC）</h3><h3 id="永久区（元空间）"><a href="#永久区（元空间）" class="headerlink" title="永久区（元空间）"></a>永久区（元空间）</h3><p>这个区域常驻内存的. 用来存放jdk自身携带的Class对象.Interface元数据,存储的是java运行时的一些环境或类信息,这个区域不存在垃圾回收!关闭vm虚拟就会释放这个区域的内存~.</p></li><li><p>jdk1.6之前 :永久代,常量池是在方法区;</p></li><li><p>jdk1.7 :永久代,但是慢慢退化了, 去永久代,常量池在堆中;</p></li><li><p>jdk1.8之后:无永久代, 常量池在元空间;</p></li><li><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648735076894-6d8dd9c3-d949-4563-acad-7532a5ccc557.png#clientId=uc724b46b-187a-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u76447e61&originHeight=186&originWidth=670&originalType=url&ratio=1&rotation=0&showTitle=false&size=43913&status=done&style=none&taskId=ubb4b290d-d691-4bf5-9b65-c324405fb4c&title=" alt="image.png"></p></li></ul><p>元空间逻辑上存在，物理上不存在</p><h2 id="11-GC-垃圾回收"><a href="#11-GC-垃圾回收" class="headerlink" title="11.GC 垃圾回收"></a>11.GC 垃圾回收</h2><p>GC:作用区域 堆+方法区<br />JVM在进行GC时，并不是对这三个区域统一回收。大部分时候，回收都是新生代~</p><ul><li>新生代</li><li>幸存区（from ， to）</li><li>老年区</li></ul><p>GC两种：轻GC（普通GC），重GC（全局GC）</p><h2 id="12-常用算法"><a href="#12-常用算法" class="headerlink" title="12.常用算法"></a>12.常用算法</h2><h3 id="1-复制算法"><a href="#1-复制算法" class="headerlink" title="1.复制算法"></a>1.复制算法</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648800715617-4d2b2864-bc17-4c29-873e-7d7a176bba81.png#clientId=uef992677-9ebd-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u94fd49aa&originHeight=620&originWidth=773&originalType=url&ratio=1&rotation=0&showTitle=false&size=201085&status=done&style=none&taskId=ub9dc2040-a063-4557-b771-e971b908039&title=" alt="image.png"></p><ul><li><p>好处:没有内存的碎片</p></li><li><p>坏处:浪费了内存空间:多了一半空间永远是空 to.假设对象100%存活(极端情况)</p></li><li><p><strong>复制算法最佳使用场景</strong>:对象存活度较低的时候:新生区;</p><h3 id="2-标记清除法"><a href="#2-标记清除法" class="headerlink" title="2.标记清除法"></a>2.标记清除法</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648800795077-d75a4b16-4501-4c95-b525-842c971743d0.png#clientId=uef992677-9ebd-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uc89d7bb4&originHeight=513&originWidth=775&originalType=url&ratio=1&rotation=0&showTitle=false&size=120928&status=done&style=none&taskId=u8bd7aacb-8633-4feb-ab4d-d603c5fca19&title=" alt="image.png"></p></li><li><p>优点:不需要额外的空间</p></li><li><p>缺点:两次扫描,严重浪费时间,会产生内存碎片</p><h3 id="3-标记整理法"><a href="#3-标记整理法" class="headerlink" title="3.标记整理法"></a>3.标记整理法</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/26758626/1648801445534-4625394c-fec6-4e6c-b97d-2c5680584317.png#clientId=uef992677-9ebd-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u741eb630&originHeight=568&originWidth=531&originalType=url&ratio=1&rotation=0&showTitle=false&size=116947&status=done&style=none&taskId=u00658d2e-c9f3-4909-95b1-f855cae4a3a&title=" alt="image.png"></p><h3 id="4-算法比较"><a href="#4-算法比较" class="headerlink" title="4.算法比较"></a>4.算法比较</h3></li></ul><p><strong>效率</strong>:复制算法&gt;标记清除算法&gt;标记压缩算法(时间复杂度)<br /><strong>内存整齐度</strong>:复制算法&#x3D;标记压缩算法&gt;标记清除算法<br /><strong>内存利用率</strong>:标记压缩算法&#x3D;标记清除算法&gt;复制算法</p>]]></content>
      
      
      <categories>
          
          <category> Java虚拟机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/04/13/hello-world/"/>
      <url>/2022/04/13/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> First Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
